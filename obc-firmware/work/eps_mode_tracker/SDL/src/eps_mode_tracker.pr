/* CIF PROCESS (292, 103), (150, 75) */
process Eps_Mode_Tracker;
    /* CIF TEXT (309, 0), (267, 140) */
    -- Text area for declarations and comments
    
    dcl eps_mode EPS_Mode_T;
    dcl report EPS_Mode_Status_Report_T;
    /* CIF ENDTEXT */
    /* CIF START (337, 160), (70, 35) */
    START;
        /* CIF NEXTSTATE (337, 210), (70, 35) */
        NEXTSTATE Idle;
    /* CIF state (814, 8), (70, 35) */
    state Idle;
        /* CIF input (748, 63), (202, 35) */
        input change_eps_mode(eps_mode);
            /* CIF decision (807, 113), (83, 50) */
            decision eps_mode;
                /* CIF ANSWER (638, 183), (119, 23) */
                (eps_high_power):
                    /* CIF task (579, 221), (238, 35) */
                    task report.eps_mode := eps_high_power;
                    /* CIF task (560, 271), (276, 35) */
                    task report.eps_last_op := mode_status_change;
                    /* CIF output (590, 321), (216, 35) */
                    output report_eps_mode_status(report);
                    /* CIF output (595, 371), (205, 35) */
                    output return_eps_mode_status(true);
                    /* CIF NEXTSTATE (651, 421), (94, 35) */
                    NEXTSTATE High_Power;
                /* CIF ANSWER (949, 183), (70, 23) */
                else:
                    /* CIF task (888, 221), (190, 35) */
                    task report.eps_mode := eps_idle;
                    /* CIF task (855, 271), (256, 35) */
                    task report.eps_last_op := mode_status_nop;
                    /* CIF output (875, 321), (216, 35) */
                    output report_eps_mode_status(report);
                    /* CIF output (879, 371), (209, 35) */
                    output return_eps_mode_status(false);
                    /* CIF NEXTSTATE (949, 421), (70, 35) */
                    NEXTSTATE Idle;
            enddecision;
    endstate;
    /* CIF state (1346, 8), (94, 35) */
    state High_Power;
        /* CIF input (1297, 63), (202, 35) */
        input change_eps_mode(eps_mode);
            /* CIF decision (1356, 113), (83, 50) */
            decision eps_mode;
                /* CIF ANSWER (1226, 183), (71, 23) */
                (eps_idle):
                    /* CIF task (1167, 221), (190, 35) */
                    task report.eps_mode := eps_idle;
                    /* CIF task (1124, 271), (276, 35) */
                    task report.eps_last_op := mode_status_change;
                    /* CIF output (1154, 321), (216, 35) */
                    output report_eps_mode_status(report);
                    /* CIF output (1159, 371), (205, 35) */
                    output return_eps_mode_status(true);
                    /* CIF NEXTSTATE (1227, 421), (70, 35) */
                    NEXTSTATE Idle;
                /* CIF ANSWER (1510, 183), (70, 23) */
                else:
                    /* CIF task (1425, 221), (238, 35) */
                    task report.eps_mode := eps_high_power;
                    /* CIF task (1416, 271), (256, 35) */
                    task report.eps_last_op := mode_status_nop;
                    /* CIF output (1436, 321), (216, 35) */
                    output report_eps_mode_status(report);
                    /* CIF output (1440, 371), (209, 35) */
                    output return_eps_mode_status(false);
                    /* CIF NEXTSTATE (1497, 421), (94, 35) */
                    NEXTSTATE High_Power;
            enddecision;
    endstate;
    /* CIF state (442, 223), (94, 35) */
    state High_Power;
    endstate;
    /* CIF state (460, 160), (70, 35) */
    state Idle;
    endstate;
endprocess Eps_Mode_Tracker;