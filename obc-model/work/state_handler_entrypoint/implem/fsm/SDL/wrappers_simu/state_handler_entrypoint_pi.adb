-- DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN DURING THE BUILD
-- (Generated by TASTE/Kazoo - $TOOL_SRC/kazoo/templates/glue/language_wrappers/simu_pi_adb/function.tmplt)
with tm_collection;
with loc_provider;
with tc_provider;
with tc_validation;
package body State_Handler_Entrypoint_PI is

   procedure Update_States_For_Synchronous_Calls (Global_State : asn1SccSystem_State) is
   begin
      tm_collection.Ctxt := Global_State.tm_collection;
      loc_provider.Ctxt := Global_State.loc_provider;
      tc_provider.Ctxt := Global_State.tc_provider;
      tc_validation.Ctxt := Global_State.tc_validation;
   end Update_States_For_Synchronous_Calls;

   procedure Update_Global_State_After_Synchronous_Calls (Global_State : in out asn1SccSystem_State)  is
   begin
      Global_State.tm_collection := tm_collection.Ctxt;
      Global_State.loc_provider := loc_provider.Ctxt;
      Global_State.tc_provider := tc_provider.Ctxt;
      Global_State.tc_validation := tc_validation.Ctxt;
   end Update_Global_State_After_Synchronous_Calls;

   procedure Startup (Global_State : in out asn1SccSystem_State) is
   begin
      --  Initialize the global state after startup function has run
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
   end Startup;

   procedure Continuous_Signals (Global_State : in out asn1SccSystem_State) is
   begin
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      State_Handler_Entrypoint.Execute_Transition (State_Handler_Entrypoint.CS_Only);
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
   end Continuous_Signals;

   --  Provided interfaces
   procedure Poll_Aoi (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      State_Handler_Entrypoint.Poll_Aoi;
      -- Update the global state
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Poll_Aoi;
   
   
   procedure Poll_Mcp (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      State_Handler_Entrypoint.Poll_Mcp;
      -- Update the global state
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Poll_Mcp;
   
   
   procedure Toggle_Pwr (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      State_Handler_Entrypoint.Toggle_Pwr;
      -- Update the global state
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Toggle_Pwr;
   
   
   procedure Trig_Aoi (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      State_Handler_Entrypoint.Trig_Aoi;
      -- Update the global state
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Trig_Aoi;
   
   
   procedure Trig_Mcp (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      State_Handler_Entrypoint.Trig_Mcp;
      -- Update the global state
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Trig_Mcp;
   
   
   procedure Trig_Pwr (Global_State : in out asn1SccSystem_State) is
   begin
      -- Set the current context (provided by the simulation API)
      State_Handler_Entrypoint.Ctxt := Global_State.State_Handler_Entrypoint;
      --  If user code calls synchronous RIs, set their state too
      Update_States_For_Synchronous_Calls (Global_State);
      State_Handler_Entrypoint.Trig_Pwr;
      -- Update the global state
      Global_State.State_Handler_Entrypoint := State_Handler_Entrypoint.Ctxt;
      --  If user code called synchronous RIs, populate their state
      Update_Global_State_After_Synchronous_Calls (Global_State);
   end Trig_Pwr;

end State_Handler_Entrypoint_PI;
