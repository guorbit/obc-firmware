/* CIF PROCESS (236, 150), (177, 75) */
process State_Handler_Entrypoint;
    /* CIF TEXT (831, 16), (267, 140) */
    -- Text area for declarations and comments
    
    dcl k, s, w CounterK;
    dcl k_max, s_max, w_max CounterK;
    
    dcl mcp Mode_Change_Packet;
    dcl lfp Location_Fix_Packet;
    /* CIF ENDTEXT */
    /* CIF START (522, 17), (70, 35) */
    START;
        /* CIF PROCEDURECALL (341, 67), (431, 35) */
        call writeln("[state_handler_entrypoint] Initialising SDL implementation");
        /* CIF task (507, 117), (99, 35) */
        task k_max := 999;
        /* CIF task (515, 172), (83, 35) */
        task s_max := 3;
        /* CIF task (513, 227), (87, 35) */
        task w_max := 1;
        /* CIF NEXTSTATE (522, 277), (70, 35) */
        NEXTSTATE Wait;
    /* CIF state (2195, 230), (70, 35) */
    state Sleep;
        /* CIF input (2291, 285), (73, 35) */
        input trig_pwr;
            /* CIF join (2311, 340), (35, 35) */
            join wake;
        /* CIF input (2090, 285), (90, 35) */
        input toggle_pwr;
            /* CIF task (2052, 340), (166, 35) */
            task s := (s+1) mod (s_max+1);
            /* CIF decision (2096, 395), (78, 50) */
            decision s = s_max;
                /* CIF ANSWER (2212, 465), (70, 23) */
                (false):
                    /* CIF NEXTSTATE (2212, 508), (70, 35) */
                    NEXTSTATE Sleep;
                /* CIF ANSWER (2006, 465), (70, 23) */
                (true):
                    /* CIF label (2006, 503), (70, 35) */
                    wake:
                    /* CIF PROCEDURECALL (1886, 553), (308, 35) */
                    call writeln("[state_handler_entrypoint] waking up");
                    /* CIF PROCEDURECALL (1997, 603), (86, 35) */
                    call writeln("");
            enddecision;
            /* CIF NEXTSTATE (2101, 714), (70, 35) */
            NEXTSTATE Wait;
    endstate;
    /* CIF state (1737, 230), (70, 35) */
    state Wait;
        /* CIF input (1613, 285), (90, 35) */
        input toggle_pwr;
            /* CIF PROCEDURECALL (1615, 340), (86, 35) */
            call toggle_led;
            /* CIF task (1568, 390), (179, 35) */
            task w := (w+1) mod (w_max+1);
            /* CIF decision (1614, 440), (87, 50) */
            decision w = w_max;
                /* CIF ANSWER (1728, 510), (70, 23) */
                (false):
                /* CIF ANSWER (1510, 510), (70, 23) */
                (true):
                    /* CIF label (1510, 548), (70, 35) */
                    sleep:
                    /* CIF PROCEDURECALL (1379, 598), (331, 35) */
                    call writeln("[state_handler_entrypoint] going to sleep");
                    /* CIF PROCEDURECALL (1502, 648), (86, 35) */
                    call writeln("");
                    /* CIF NEXTSTATE (1510, 698), (70, 35) */
                    NEXTSTATE Sleep;
            enddecision;
            /* CIF NEXTSTATE (1623, 763), (70, 35) */
            NEXTSTATE Wait;
        /* CIF input (1815, 285), (73, 35) */
        input trig_pwr;
            /* CIF PROCEDURECALL (1809, 340), (86, 35) */
            call toggle_led;
            /* CIF join (1835, 390), (35, 35) */
            join sleep;
    endstate;
    /* CIF state (958, 226), (70, 35) */
    state Wait;
        /* CIF input (1133, 281), (120, 35) */
        input poll_aoi, trig_aoi;
            /* CIF PROCEDURECALL (1150, 336), (86, 35) */
            call toggle_led;
            /* CIF PROCEDURECALL (1135, 386), (116, 35) */
            call request_loc(lfp);
            /* CIF PROCEDURECALL (1014, 436), (358, 35) */
            call writeln("[state_handler_entrypoint] [poll_aoi] printout:");
            /* CIF PROCEDURECALL (1131, 486), (124, 35) */
            call writeln("    k: ", k);
            /* CIF PROCEDURECALL (1123, 536), (140, 35) */
            call writeln("    t: ", lfp.t);
            /* CIF PROCEDURECALL (1113, 586), (161, 35) */
            call writeln("    lat: ", lfp.lat);
            /* CIF PROCEDURECALL (1110, 636), (167, 35) */
            call writeln("    lon: ", lfp.lon);
            /* CIF PROCEDURECALL (1150, 686), (86, 35) */
            call writeln("");
            /* CIF output (1132, 736), (122, 35) */
            output send_tm_aoi(lfp);
            /* CIF task (1109, 786), (169, 35) */
            task k := (k+1) mod (k_max+1);
            /* CIF NEXTSTATE (1159, 836), (70, 35) */
            NEXTSTATE Wait;
        /* CIF input (723, 281), (135, 35) */
        input poll_mcp, trig_mcp;
            /* CIF PROCEDURECALL (748, 336), (86, 35) */
            call toggle_led;
            /* CIF PROCEDURECALL (731, 386), (119, 35) */
            call request_tc(mcp);
            /* CIF PROCEDURECALL (608, 436), (365, 35) */
            call writeln("[state_handler_entrypoint] [poll_mcp] printout:");
            /* CIF PROCEDURECALL (729, 486), (124, 35) */
            call writeln("    k: ", k);
            /* CIF PROCEDURECALL (653, 536), (276, 35) */
            call writeln("    target-addr: ", mcp.target_addr);
            /* CIF PROCEDURECALL (646, 586), (290, 35) */
            call writeln("    target-mode: ", mcp.target_mode);
            /* CIF PROCEDURECALL (687, 636), (208, 35) */
            call writeln("    ttl-ms:", mcp.ttl_ms);
            /* CIF PROCEDURECALL (748, 686), (86, 35) */
            call writeln("");
            /* CIF output (722, 736), (138, 35) */
            output send_tm_mcp(mcp);
            /* CIF task (706, 786), (169, 35) */
            task k := (k+1) mod (k_max+1);
            /* CIF NEXTSTATE (756, 836), (70, 35) */
            NEXTSTATE Wait;
    endstate;
endprocess State_Handler_Entrypoint;