// Body file for function state_handler_entrypoint
// Generated by TASTE on 2022-11-27 16:30:03
// You can edit this file, it will not be overwritten
// Provided interfaces : poll_aoi, poll_mc_packet
// Required interfaces : collect_tm, request_loc, request_tc, validate_mc_vs_tm
// User-defined properties for this function:
//   |_ Taste::Startup_Priority = 1
// Timers              : 

#include "state_handler_entrypoint.h"
#include "state_handler_entrypoint_state.h"
#include <iostream>
#include "PrintTypesAsASN1.h"

// Define and use function state inside this context structure
// avoid defining global/static variable elsewhere
state_handler_entrypoint_state ctxt_state_handler_entrypoint;


void state_handler_entrypoint_startup(void)
{
   // Write your initialisation code, but DO NOT CALL REQUIRED INTERFACES
   std::cout << "[state_handler_entrypoint] Initialising C++ implementation" << std::endl;
}

void state_handler_entrypoint_PI_poll_aoi(void)
{
   // Write your code here
    asn1SccLocation_Fix_Packet* lfp;
    state_handler_entrypoint_RI_request_loc(lfp);

    printf("[state_handler_entrypoint] [poll_aoi] printout:\n\tcall:\t%d\n\tt:\t%u\n\tlat:\t%f\n\tlon:\t%f\n\n",
           ctxt_state_handler_entrypoint.k,
           lfp->t,
           lfp->lat,
           lfp->lon
           );

    ctxt_state_handler_entrypoint.k++;
}


void state_handler_entrypoint_PI_poll_mcp(void)
{
   // Write your code here
    asn1SccMode_Change_Packet* mcp;
    state_handler_entrypoint_RI_request_tc(mcp);

    printf("[state_handler_entrypoint] [poll_mcp] printout:\n\tcall:\t%d\n\taddr:\t%d\n\tmode:\t%d\n\tttl:\t%d\n\n",
           ctxt_state_handler_entrypoint.k,
           mcp->target_addr,
           mcp->target_mode,
           mcp->ttl_ms
           );

    ctxt_state_handler_entrypoint.k++;
}



void state_handler_entrypoint_PI_toggle_pwr(void)
{

}

