/* Header file for function HAL
 * Generated by TASTE on 2023-02-18 14:36:43
 * DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN DURING THE BUILD
 */

/* The purpose of this file is to provide a wrapper around the user code,
 * with a single interface that is independent of the implementation language
 * of the function. The parameters of each PI are blackboxes encoded
 * in the form specified in the interface view (Native, uPER, or ACN)
*/

#pragma once
#if defined(__unix__) || defined (__MSP430__)
   #include <stdlib.h>
   #include <stdio.h>
#else
   typedef unsigned size_t;
#endif

#ifdef __cplusplus
extern "C" {
#endif

#include "hal.h"

// Function initialization - calls user startup code of all dependent functions
void init_hal(void);


/* Provided interfaces */
void hal_get_current_temperature
      (char *OUT_temperature_value, size_t *OUT_temperature_value_len);



void hal_get_current_voltage
      (char *OUT_current_voltage, size_t *OUT_current_voltage_len);



void hal_oled_load_register
      (const char *IN_register_value, size_t IN_register_value_len,
       char *OUT_success, size_t *OUT_success_len);



void hal_oled_set_data_enable
      (const char *IN_enabled, size_t IN_enabled_len,
       char *OUT_success, size_t *OUT_success_len);



void hal_oled_turn_on_off
      (const char *IN_enabled, size_t IN_enabled_len,
       char *OUT_success, size_t *OUT_success_len);



void hal_set_pwm
      (const char *IN_pwm_value, size_t IN_pwm_value_len);


#ifdef __cplusplus
}
#endif

