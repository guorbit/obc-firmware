#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint CounterK;


flag CounterK_Equal(const CounterK* pVal1, const CounterK* pVal2);

#define ERR_COUNTERK		1  /*(0 .. 1000)*/
flag CounterK_IsConstraintValid(const CounterK* pVal, int* pErrCode);

void CounterK_Initialize(CounterK* pVal);

#define ERR_UPER_ENCODE_COUNTERK		2  /**/
#define CounterK_REQUIRED_BYTES_FOR_ENCODING       2 
#define CounterK_REQUIRED_BITS_FOR_ENCODING        10

flag CounterK_Encode(const CounterK* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_COUNTERK		3  /**/
flag CounterK_Decode(CounterK* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_COUNTERK		4  /**/
#define CounterK_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define CounterK_REQUIRED_BITS_FOR_ACN_ENCODING        10

flag CounterK_ACN_Encode(const CounterK* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_COUNTERK		5  /**/
flag CounterK_ACN_Decode(CounterK* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint Time_UNIX;


flag Time_UNIX_Equal(const Time_UNIX* pVal1, const Time_UNIX* pVal2);

#define ERR_TIME_UNIX		6  /*(0 .. 4294967294)*/
flag Time_UNIX_IsConstraintValid(const Time_UNIX* pVal, int* pErrCode);

void Time_UNIX_Initialize(Time_UNIX* pVal);

#define ERR_UPER_ENCODE_TIME_UNIX		7  /**/
#define Time_UNIX_REQUIRED_BYTES_FOR_ENCODING       4 
#define Time_UNIX_REQUIRED_BITS_FOR_ENCODING        32

flag Time_UNIX_Encode(const Time_UNIX* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TIME_UNIX		8  /**/
flag Time_UNIX_Decode(Time_UNIX* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TIME_UNIX		9  /**/
#define Time_UNIX_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define Time_UNIX_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag Time_UNIX_ACN_Encode(const Time_UNIX* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TIME_UNIX		10  /**/
flag Time_UNIX_ACN_Decode(Time_UNIX* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real Latitude_WGS84;


flag Latitude_WGS84_Equal(const Latitude_WGS84* pVal1, const Latitude_WGS84* pVal2);

#define ERR_LATITUDE_WGS84		11  /*(-90.0 .. 90.0)*/
flag Latitude_WGS84_IsConstraintValid(const Latitude_WGS84* pVal, int* pErrCode);

void Latitude_WGS84_Initialize(Latitude_WGS84* pVal);

#define ERR_UPER_ENCODE_LATITUDE_WGS84		12  /**/
#define Latitude_WGS84_REQUIRED_BYTES_FOR_ENCODING       13 
#define Latitude_WGS84_REQUIRED_BITS_FOR_ENCODING        104

flag Latitude_WGS84_Encode(const Latitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LATITUDE_WGS84		13  /**/
flag Latitude_WGS84_Decode(Latitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LATITUDE_WGS84		14  /**/
#define Latitude_WGS84_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define Latitude_WGS84_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag Latitude_WGS84_ACN_Encode(const Latitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LATITUDE_WGS84		15  /**/
flag Latitude_WGS84_ACN_Decode(Latitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real Longitude_WGS84;


flag Longitude_WGS84_Equal(const Longitude_WGS84* pVal1, const Longitude_WGS84* pVal2);

#define ERR_LONGITUDE_WGS84		16  /*(-180.0 .. 180.0)*/
flag Longitude_WGS84_IsConstraintValid(const Longitude_WGS84* pVal, int* pErrCode);

void Longitude_WGS84_Initialize(Longitude_WGS84* pVal);

#define ERR_UPER_ENCODE_LONGITUDE_WGS84		17  /**/
#define Longitude_WGS84_REQUIRED_BYTES_FOR_ENCODING       13 
#define Longitude_WGS84_REQUIRED_BITS_FOR_ENCODING        104

flag Longitude_WGS84_Encode(const Longitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LONGITUDE_WGS84		18  /**/
flag Longitude_WGS84_Decode(Longitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LONGITUDE_WGS84		19  /**/
#define Longitude_WGS84_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define Longitude_WGS84_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag Longitude_WGS84_ACN_Encode(const Longitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LONGITUDE_WGS84		20  /**/
flag Longitude_WGS84_ACN_Decode(Longitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Location --------------------------------------------*/
typedef struct {
    Latitude_WGS84 lat;
    Longitude_WGS84 lon;

} Location;

flag Location_Equal(const Location* pVal1, const Location* pVal2);

#define ERR_LOCATION		41  /**/
#define ERR_LOCATION_LAT_2		26  /**/
#define ERR_LOCATION_LON_2		36  /**/
flag Location_IsConstraintValid(const Location* pVal, int* pErrCode);

void Location_Initialize(Location* pVal);

#define ERR_UPER_ENCODE_LOCATION		42  /**/
#define ERR_UPER_ENCODE_LOCATION_LAT_2		27  /**/
#define ERR_UPER_ENCODE_LOCATION_LON_2		37  /**/
#define Location_REQUIRED_BYTES_FOR_ENCODING       26 
#define Location_REQUIRED_BITS_FOR_ENCODING        208

flag Location_Encode(const Location* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LOCATION		43  /**/
#define ERR_UPER_DECODE_LOCATION_LAT_2		28  /**/
#define ERR_UPER_DECODE_LOCATION_LON_2		38  /**/
flag Location_Decode(Location* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LOCATION		44  /**/
#define ERR_ACN_ENCODE_LOCATION_LAT_2		29  /**/
#define ERR_ACN_ENCODE_LOCATION_LON_2		39  /**/
#define Location_REQUIRED_BYTES_FOR_ACN_ENCODING       26 
#define Location_REQUIRED_BITS_FOR_ACN_ENCODING        208

flag Location_ACN_Encode(const Location* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LOCATION		45  /**/
#define ERR_ACN_DECODE_LOCATION_LAT_2		30  /**/
#define ERR_ACN_DECODE_LOCATION_LON_2		40  /**/
flag Location_ACN_Decode(Location* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Location_Fix_Packet --------------------------------------------*/
typedef struct {
    Time_UNIX t;
    Latitude_WGS84 lat;
    Longitude_WGS84 lon;

} Location_Fix_Packet;

flag Location_Fix_Packet_Equal(const Location_Fix_Packet* pVal1, const Location_Fix_Packet* pVal2);

#define ERR_LOCATION_FIX_PACKET		131  /**/
#define ERR_LOCATION_FIX_PACKET_T_2		106  /**/
#define ERR_LOCATION_FIX_PACKET_LAT_2		116  /**/
#define ERR_LOCATION_FIX_PACKET_LON_2		126  /**/
flag Location_Fix_Packet_IsConstraintValid(const Location_Fix_Packet* pVal, int* pErrCode);

void Location_Fix_Packet_Initialize(Location_Fix_Packet* pVal);

#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET		132  /**/
#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET_T_2		107  /**/
#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET_LAT_2		117  /**/
#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET_LON_2		127  /**/
#define Location_Fix_Packet_REQUIRED_BYTES_FOR_ENCODING       30 
#define Location_Fix_Packet_REQUIRED_BITS_FOR_ENCODING        240

flag Location_Fix_Packet_Encode(const Location_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LOCATION_FIX_PACKET		133  /**/
#define ERR_UPER_DECODE_LOCATION_FIX_PACKET_T_2		108  /**/
#define ERR_UPER_DECODE_LOCATION_FIX_PACKET_LAT_2		118  /**/
#define ERR_UPER_DECODE_LOCATION_FIX_PACKET_LON_2		128  /**/
flag Location_Fix_Packet_Decode(Location_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET		134  /**/
#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET_T_2		109  /**/
#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET_LAT_2		119  /**/
#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET_LON_2		129  /**/
#define Location_Fix_Packet_REQUIRED_BYTES_FOR_ACN_ENCODING       30 
#define Location_Fix_Packet_REQUIRED_BITS_FOR_ACN_ENCODING        240

flag Location_Fix_Packet_ACN_Encode(const Location_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LOCATION_FIX_PACKET		135  /**/
#define ERR_ACN_DECODE_LOCATION_FIX_PACKET_T_2		110  /**/
#define ERR_ACN_DECODE_LOCATION_FIX_PACKET_LAT_2		120  /**/
#define ERR_ACN_DECODE_LOCATION_FIX_PACKET_LON_2		130  /**/
flag Location_Fix_Packet_ACN_Decode(Location_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real Temperature_Generic;


flag Temperature_Generic_Equal(const Temperature_Generic* pVal1, const Temperature_Generic* pVal2);

#define ERR_TEMPERATURE_GENERIC		46  /*(-200.0 .. 200.0)*/
flag Temperature_Generic_IsConstraintValid(const Temperature_Generic* pVal, int* pErrCode);

void Temperature_Generic_Initialize(Temperature_Generic* pVal);

#define ERR_UPER_ENCODE_TEMPERATURE_GENERIC		47  /**/
#define Temperature_Generic_REQUIRED_BYTES_FOR_ENCODING       13 
#define Temperature_Generic_REQUIRED_BITS_FOR_ENCODING        104

flag Temperature_Generic_Encode(const Temperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TEMPERATURE_GENERIC		48  /**/
flag Temperature_Generic_Decode(Temperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TEMPERATURE_GENERIC		49  /**/
#define Temperature_Generic_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define Temperature_Generic_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag Temperature_Generic_ACN_Encode(const Temperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TEMPERATURE_GENERIC		50  /**/
flag Temperature_Generic_ACN_Decode(Temperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag Deployment_Digital;


flag Deployment_Digital_Equal(const Deployment_Digital* pVal1, const Deployment_Digital* pVal2);

#define ERR_DEPLOYMENT_DIGITAL		51  /**/
flag Deployment_Digital_IsConstraintValid(const Deployment_Digital* pVal, int* pErrCode);

void Deployment_Digital_Initialize(Deployment_Digital* pVal);

#define ERR_UPER_ENCODE_DEPLOYMENT_DIGITAL		52  /**/
#define Deployment_Digital_REQUIRED_BYTES_FOR_ENCODING       1 
#define Deployment_Digital_REQUIRED_BITS_FOR_ENCODING        1

flag Deployment_Digital_Encode(const Deployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DEPLOYMENT_DIGITAL		53  /**/
flag Deployment_Digital_Decode(Deployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DEPLOYMENT_DIGITAL		54  /**/
#define Deployment_Digital_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Deployment_Digital_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag Deployment_Digital_ACN_Encode(const Deployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DEPLOYMENT_DIGITAL		55  /**/
flag Deployment_Digital_ACN_Decode(Deployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real Deployment_Analogue;


flag Deployment_Analogue_Equal(const Deployment_Analogue* pVal1, const Deployment_Analogue* pVal2);

#define ERR_DEPLOYMENT_ANALOGUE		56  /*(0.0 .. 100.0)*/
flag Deployment_Analogue_IsConstraintValid(const Deployment_Analogue* pVal, int* pErrCode);

void Deployment_Analogue_Initialize(Deployment_Analogue* pVal);

#define ERR_UPER_ENCODE_DEPLOYMENT_ANALOGUE		57  /**/
#define Deployment_Analogue_REQUIRED_BYTES_FOR_ENCODING       13 
#define Deployment_Analogue_REQUIRED_BITS_FOR_ENCODING        104

flag Deployment_Analogue_Encode(const Deployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DEPLOYMENT_ANALOGUE		58  /**/
flag Deployment_Analogue_Decode(Deployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DEPLOYMENT_ANALOGUE		59  /**/
#define Deployment_Analogue_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define Deployment_Analogue_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag Deployment_Analogue_ACN_Encode(const Deployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DEPLOYMENT_ANALOGUE		60  /**/
flag Deployment_Analogue_ACN_Decode(Deployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint System_Mode;


flag System_Mode_Equal(const System_Mode* pVal1, const System_Mode* pVal2);

#define ERR_SYSTEM_MODE		61  /*(0 .. 4)*/
flag System_Mode_IsConstraintValid(const System_Mode* pVal, int* pErrCode);

void System_Mode_Initialize(System_Mode* pVal);

#define ERR_UPER_ENCODE_SYSTEM_MODE		62  /**/
#define System_Mode_REQUIRED_BYTES_FOR_ENCODING       1 
#define System_Mode_REQUIRED_BITS_FOR_ENCODING        3

flag System_Mode_Encode(const System_Mode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SYSTEM_MODE		63  /**/
flag System_Mode_Decode(System_Mode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SYSTEM_MODE		64  /**/
#define System_Mode_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define System_Mode_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag System_Mode_ACN_Encode(const System_Mode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SYSTEM_MODE		65  /**/
flag System_Mode_ACN_Decode(System_Mode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint Subsystem_Address;


flag Subsystem_Address_Equal(const Subsystem_Address* pVal1, const Subsystem_Address* pVal2);

#define ERR_SUBSYSTEM_ADDRESS		66  /*(0 .. 6)*/
flag Subsystem_Address_IsConstraintValid(const Subsystem_Address* pVal, int* pErrCode);

void Subsystem_Address_Initialize(Subsystem_Address* pVal);

#define ERR_UPER_ENCODE_SUBSYSTEM_ADDRESS		67  /**/
#define Subsystem_Address_REQUIRED_BYTES_FOR_ENCODING       1 
#define Subsystem_Address_REQUIRED_BITS_FOR_ENCODING        3

flag Subsystem_Address_Encode(const Subsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SUBSYSTEM_ADDRESS		68  /**/
flag Subsystem_Address_Decode(Subsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SUBSYSTEM_ADDRESS		69  /**/
#define Subsystem_Address_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define Subsystem_Address_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag Subsystem_Address_ACN_Encode(const Subsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SUBSYSTEM_ADDRESS		70  /**/
flag Subsystem_Address_ACN_Decode(Subsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Mode_Change_Packet --------------------------------------------*/
typedef asn1SccUint Mode_Change_Packet_ttl_ms;

typedef struct {
    Subsystem_Address target_addr;
    System_Mode target_mode;
    Mode_Change_Packet_ttl_ms ttl_ms;

} Mode_Change_Packet;

flag Mode_Change_Packet_ttl_ms_Equal(const Mode_Change_Packet_ttl_ms* pVal1, const Mode_Change_Packet_ttl_ms* pVal2);

flag Mode_Change_Packet_Equal(const Mode_Change_Packet* pVal1, const Mode_Change_Packet* pVal2);

#define ERR_MODE_CHANGE_PACKET_TTL_MS		91  /*(0 .. 10000)*/
flag Mode_Change_Packet_ttl_ms_IsConstraintValid(const Mode_Change_Packet_ttl_ms* pVal, int* pErrCode);

#define ERR_MODE_CHANGE_PACKET		96  /**/
#define ERR_MODE_CHANGE_PACKET_TARGET_ADDR_2		76  /**/
#define ERR_MODE_CHANGE_PACKET_TARGET_MODE_2		86  /**/
flag Mode_Change_Packet_IsConstraintValid(const Mode_Change_Packet* pVal, int* pErrCode);

void Mode_Change_Packet_ttl_ms_Initialize(Mode_Change_Packet_ttl_ms* pVal);
void Mode_Change_Packet_Initialize(Mode_Change_Packet* pVal);

#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET		97  /**/
#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		77  /**/
#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET_TARGET_MODE_2		87  /**/
#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET_TTL_MS		92  /**/
#define Mode_Change_Packet_REQUIRED_BYTES_FOR_ENCODING       3 
#define Mode_Change_Packet_REQUIRED_BITS_FOR_ENCODING        20

flag Mode_Change_Packet_Encode(const Mode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MODE_CHANGE_PACKET		98  /**/
#define ERR_UPER_DECODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		78  /**/
#define ERR_UPER_DECODE_MODE_CHANGE_PACKET_TARGET_MODE_2		88  /**/
#define ERR_UPER_DECODE_MODE_CHANGE_PACKET_TTL_MS		93  /**/
flag Mode_Change_Packet_Decode(Mode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET		99  /**/
#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		79  /**/
#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET_TARGET_MODE_2		89  /**/
#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET_TTL_MS		94  /**/
#define Mode_Change_Packet_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define Mode_Change_Packet_REQUIRED_BITS_FOR_ACN_ENCODING        20

flag Mode_Change_Packet_ACN_Encode(const Mode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MODE_CHANGE_PACKET		100  /**/
#define ERR_ACN_DECODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		80  /**/
#define ERR_ACN_DECODE_MODE_CHANGE_PACKET_TARGET_MODE_2		90  /**/
#define ERR_ACN_DECODE_MODE_CHANGE_PACKET_TTL_MS		95  /**/
flag Mode_Change_Packet_ACN_Decode(Mode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

#define ERR_T_INT32		136  /*(-2147483648 .. 2147483647)*/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		137  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		138  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		139  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		140  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

#define ERR_T_UINT32		141  /*(0 .. 4294967295)*/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		142  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		143  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		144  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		145  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

#define ERR_T_INT8		146  /*(-128 .. 127)*/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		147  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		148  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		149  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		150  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

#define ERR_T_UINT8		151  /*(0 .. 255)*/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		152  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		153  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		154  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		155  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

#define ERR_T_BOOLEAN		156  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		157  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		158  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		159  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		160  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		161  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_hal = 0,
    PID_gui = 1,
    PID_loc_provider = 2,
    PID_state_handler_entrypoint = 3,
    PID_tc_provider = 4,
    PID_tm_collection = 5,
    PID_env = 6
} PID;

// please use the following macros to avoid breaking code.
#define PID_hal PID_hal
#define PID_gui PID_gui
#define PID_loc_provider PID_loc_provider
#define PID_state_handler_entrypoint PID_state_handler_entrypoint
#define PID_tc_provider PID_tc_provider
#define PID_tm_collection PID_tm_collection
#define PID_env PID_env

flag PID_Equal(const PID* pVal1, const PID* pVal2);

#define ERR_PID		166  /*hal | gui | loc-provider | state-handler-entrypoint | tc-provider | tm-collection | env*/
flag PID_IsConstraintValid(const PID* pVal, int* pErrCode);

void PID_Initialize(PID* pVal);

#define ERR_UPER_ENCODE_PID		167  /**/
#define PID_REQUIRED_BYTES_FOR_ENCODING       1 
#define PID_REQUIRED_BITS_FOR_ENCODING        3

flag PID_Encode(const PID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		168  /**/
flag PID_Decode(PID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		169  /**/
#define PID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define PID_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag PID_ACN_Encode(const PID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		170  /**/
flag PID_ACN_Decode(PID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
