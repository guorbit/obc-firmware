/* File generated by kazoo for TASTE - do not edit */
#include <stddef.h>


// Protected provided interfaces of function state_handler_entrypoint

void pro_state_handler_entrypoint_poll_aoi(void);
void pro_state_handler_entrypoint_poll_mcp(void);
void pro_state_handler_entrypoint_toggle_pwr(void);
void pro_state_handler_entrypoint_trig_aoi(void);
void pro_state_handler_entrypoint_trig_mcp(void);
void pro_state_handler_entrypoint_trig_pwr(void);
// End of the protected provided interfaces of function state_handler_entrypoint

// Required interfaces of function state_handler_entrypoint

// Required interface collect_tm in function state_handler_entrypoint
// This RI is connected to: tm_collection
void vm_state_handler_entrypoint_collect_tm(void);
// Required interface request_loc in function state_handler_entrypoint
// This RI is connected to: loc_provider
void vm_state_handler_entrypoint_request_loc
        (char *OUT_buf_lfp, size_t *size_OUT_buf_lfp);
// Required interface request_tc in function state_handler_entrypoint
// This RI is connected to: tc_provider
void vm_state_handler_entrypoint_request_tc
        (char *OUT_buf_mcp, size_t *size_OUT_buf_mcp);
// Required interface send_tm_aoi in function state_handler_entrypoint
// This RI is connected to: gui
void vm_state_handler_entrypoint_send_tm_aoi
        (const char *IN_buf_lfp, size_t size_IN_buf_lfp);
// Required interface send_tm_mcp in function state_handler_entrypoint
// This RI is connected to: gui
void vm_state_handler_entrypoint_send_tm_mcp
        (const char *IN_buf_mcp, size_t size_IN_buf_mcp);
// Required interface validate_mc_vs_tm in function state_handler_entrypoint
// This RI is connected to: tc_validation
void vm_state_handler_entrypoint_validate_mc_vs_tm(void);
// End of the required interfaces of function state_handler_entrypoint


// Required interfaces of function tm_collection

// Required interface request_tm in function tm_collection
// This RI is connected to: tm_provider
void vm_tm_collection_request_tm
        (char *OUT_buf_temp, size_t *size_OUT_buf_temp,
         char *OUT_buf_depl_d, size_t *size_OUT_buf_depl_d,
         char *OUT_buf_depl_a, size_t *size_OUT_buf_depl_a);
// End of the required interfaces of function tm_collection


void call_state_handler_entrypoint_poll_aoi (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// gui_send_tm_aoi.send_tm_aoi
// gui_send_tm_mcp.send_tm_mcp

void call_state_handler_entrypoint_poll_mcp (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// gui_send_tm_aoi.send_tm_aoi
// gui_send_tm_mcp.send_tm_mcp

void call_state_handler_entrypoint_toggle_pwr (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// gui_send_tm_aoi.send_tm_aoi
// gui_send_tm_mcp.send_tm_mcp

void call_state_handler_entrypoint_trig_aoi (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// gui_send_tm_aoi.send_tm_aoi
// gui_send_tm_mcp.send_tm_mcp

void call_state_handler_entrypoint_trig_mcp (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// gui_send_tm_aoi.send_tm_aoi
// gui_send_tm_mcp.send_tm_mcp

void call_state_handler_entrypoint_trig_pwr (const char* buf, size_t len);

// This is the list of remote threads/RIs :
// gui_send_tm_aoi.send_tm_aoi
// gui_send_tm_mcp.send_tm_mcp

