/* File generated by kazoo for TASTE - do not edit */
#include <stddef.h>

// Include PolyORB-HI-C header files:
#include "types.h"
#include "deployment.h"
#include "po_hi_transport.h"
#include "po_hi_gqueue.h"
#include "activity.h"
#include "po_hi_task.h"
#include "po_hi_protected.h"



// Required interfaces of function gui

// Required interface trig_aoi in function gui
// This RI is connected to: state_handler_entrypoint
void vm_gui_trig_aoi(void);
// Required interface trig_mcp in function gui
// This RI is connected to: state_handler_entrypoint
void vm_gui_trig_mcp(void);
// Required interface trig_pwr in function gui
// This RI is connected to: state_handler_entrypoint
void vm_gui_trig_pwr(void);
// End of the required interfaces of function gui


// Required interfaces of function state_handler_entrypoint

// Required interface collect_tm in function state_handler_entrypoint
// This RI is connected to: tm_collection
void vm_state_handler_entrypoint_collect_tm(void);
// Required interface request_loc in function state_handler_entrypoint
// This RI is connected to: loc_provider
void vm_state_handler_entrypoint_request_loc
        (char *OUT_buf_lfp, size_t *size_OUT_buf_lfp);
// Required interface request_tc in function state_handler_entrypoint
// This RI is connected to: tc_provider
void vm_state_handler_entrypoint_request_tc
        (char *OUT_buf_mcp, size_t *size_OUT_buf_mcp);
// Required interface send_tm_aoi in function state_handler_entrypoint
// This RI is connected to: gui
void vm_state_handler_entrypoint_send_tm_aoi
        (const char *IN_buf_lfp, size_t size_IN_buf_lfp);
// Required interface send_tm_mcp in function state_handler_entrypoint
// This RI is connected to: gui
void vm_state_handler_entrypoint_send_tm_mcp
        (const char *IN_buf_mcp, size_t size_IN_buf_mcp);
// Required interface validate_mc_vs_tm in function state_handler_entrypoint
// This RI is connected to: tc_validation
void vm_state_handler_entrypoint_validate_mc_vs_tm(void);
// End of the required interfaces of function state_handler_entrypoint

//  SDL Functions need to know if a message is pending in their queues
//  to know if they can execute the continuous signals
void state_handler_entrypoint_check_queue(bool *OUT_pending_message);


// Required interfaces of function tm_collection

// Required interface request_tm in function tm_collection
// This RI is connected to: tm_provider
void vm_tm_collection_request_tm
        (char *OUT_buf_temp, size_t *size_OUT_buf_temp,
         char *OUT_buf_depl_d, size_t *size_OUT_buf_depl_d,
         char *OUT_buf_depl_a, size_t *size_OUT_buf_depl_a);
// End of the required interfaces of function tm_collection


void call_gui_poll (__po_hi_task_id);


void call_gui_send_tm_aoi (__po_hi_task_id, dataview__location_fix_packet_buffer_impl *);


void call_gui_send_tm_mcp (__po_hi_task_id, dataview__mode_change_packet_buffer_impl *);


void call_state_handler_entrypoint_poll_aoi (__po_hi_task_id);


void call_state_handler_entrypoint_poll_mcp (__po_hi_task_id);


void call_state_handler_entrypoint_toggle_pwr (__po_hi_task_id);


void call_state_handler_entrypoint_trig_aoi (__po_hi_task_id);


void call_state_handler_entrypoint_trig_mcp (__po_hi_task_id);


void call_state_handler_entrypoint_trig_pwr (__po_hi_task_id);


