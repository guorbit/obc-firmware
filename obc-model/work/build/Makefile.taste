TOOL_INST       := $(shell taste-config --prefix)

all: node_1_p1 node_2_p1
	# Check stack usage for all tasks of all nodes
	python3 ./checkAllStacks.py

# Generate a dynamic library excluding the runtime for each node
simu: node_1_simu node_2_simu


run:	run_x86_ground_station_partition run_msp430_obc_partition


ocarina:  # call Ocarina for POHI targets
	ocarina -x main.aadl

DriversConfig/drivers_config.h:	drivers_config.asn
	mkdir -p DriversConfig
	asn1scc -o DriversConfig -c drivers_config.asn /home/taste/tool-inst/include/ocarina/runtime/polyorb-hi-c/src/drivers/configuration/serial.asn

check_targets:  # check that runtime of every node is installed
	check_deployment_target_cli.py x86_linux
	check_deployment_target_cli.py msp430fr5969_freertos


# Build of node node_1 for PLATFORM_NATIVE
# (rule generated by templates/concurrency_view/aadl_4_makefile/node.tmplt)

node_1_p1: x86_ground_station_glue DriversConfig/drivers_config.h
	$(MAKE) -j -C node_1 -f Makefile.node_1



#  Build of partition x86_ground_station (common to all targets)
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)


# CPU PLATFORM: PLATFORM_NATIVE
x86_ground_station_glue:	gui
	touch $@



# Rule to execute the generated binary for this partition (used by space creator Run button)
run_x86_ground_station_partition: run_gui_gui run_x86_ground_station_binary


run_x86_ground_station_binary:
	# make sure the generated artefacts appear in space creator
	touch ../../*.pro
	cd ../binaries && taste-run-and-trace ./x86_ground_station || :

run_gui_gui:
	uname -a | grep WSL && sudo sysctl fs.mqueue.msg_max=100 || :
	cd ../binaries && ./gui
	# When GUI exits, kill the binary (-INT to allow coverage collection)
	pkill -INT x86_ground_station


# Provide scripts to run the gui and its partition automatically
gui: ../binaries/gui
	touch $@

../binaries/gui:
	# Generate the script containing a copy of GUI/src (UserWidgets.py + other files)
	echo "cd gui_GUI && cp -fu ../../gui/GUI/src/* . && taste-gui" > $@
	chmod +x $@
	echo "./x86_ground_station & sleep 1 ; ./gui ; pkill -INT x86_ground_station" > ../binaries/run_x86_ground_station_partition
	chmod +x ../binaries/run_x86_ground_station_partition

# Build of node node_2 for PLATFORM_MSP430_FREERTOS
# (rule generated by templates/concurrency_view/aadl_4_makefile/node.tmplt)

node_2_p1: msp430_obc_glue DriversConfig/drivers_config.h
	$(MAKE) -j -C node_2 -f Makefile.node_2



#  Build of partition msp430_obc (common to all targets)
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)


# CPU PLATFORM: PLATFORM_MSP430_FREERTOS
msp430_obc_glue:	hal  loc_provider  state_handler_entrypoint  tc_provider  tm_collection
	args=$$(python3 -c "import os, sys; print(' '.join({os.path.basename(f):f for f in sys.argv[1:]}.values()))" ${wildcard ../state_handler_entrypoint/SDL/code/state_handler_entrypoint_datamodel.asn} ${wildcard ../state_handler_entrypoint/SDL/Context-state-handler-entrypoint.asn} ../dataview/dataview-uniq.asn); \
	mkdir -p ../dataview/Ada; asn1scc -Ada -equal --target allboards -typePrefix asn1Scc -o ../dataview/Ada $$args 
	touch $@



run_msp430_obc_partition:
	echo "Execution platform PLATFORM_MSP430_FREERTOS is not compatible with the host OS"


hal:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C


loc_provider:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C


state_handler_entrypoint:	../state_handler_entrypoint/SDL/code/state_handler_entrypoint.adb
	touch $@

../state_handler_entrypoint/SDL/code/state_handler_entrypoint.adb:	../state_handler_entrypoint/SDL/src/state_handler_entrypoint.pr ../state_handler_entrypoint/SDL/src/system_structure.pr ../state_handler_entrypoint/SDL/src/dataview-uniq.asn
	# Call opengeode to generate the functional code
	$(MAKE) -j -C ../state_handler_entrypoint/SDL generate-code

tc_provider:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C


tm_collection:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C



clean:
	$(MAKE) -C node_1 -f Makefile.node_1 clean
	rm -rf *_adainit deploymentview_final
	$(MAKE) -C node_2 -f Makefile.node_2 clean
	rm -rf *_adainit deploymentview_final

.PHONY:	clean simu run $(IF_PROPERTIES)

