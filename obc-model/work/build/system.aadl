--  TASTE Concurrency View - Generated by Kazoo, do not edit manually
--  Generated by the template: ~/tool-src/kazoo/templates/concurrency_view/aadl_2_threads/system.tmplt

package Gui_Poll_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Gui_Poll
features
   OUTPORT_State_Handler_Entrypoint_Trig_Aoi : out event port;
   OUTPORT_State_Handler_Entrypoint_Trig_Mcp : out event port;
   OUTPORT_State_Handler_Entrypoint_Trig_Pwr : out event port;
end Gui_Poll;

thread implementation Gui_Poll.others
properties
   Activate_Entrypoint_Source_Text => "init_gui";
   Compute_Entrypoint_Source_Text    => "call_gui_poll";
   Dispatch_Protocol                 => Periodic;
   Period                            => 10 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end Gui_Poll.others;

end Gui_Poll_Thread;
package Gui_Send_Tm_Aoi_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Gui_Send_Tm_Aoi
features
   INPORT_Send_Tm_Aoi : in event data port DataView::Location_Fix_Packet_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "call_gui_send_tm_aoi"; };
   OUTPORT_State_Handler_Entrypoint_Trig_Aoi : out event port;
   OUTPORT_State_Handler_Entrypoint_Trig_Mcp : out event port;
   OUTPORT_State_Handler_Entrypoint_Trig_Pwr : out event port;
end Gui_Send_Tm_Aoi;

thread implementation Gui_Send_Tm_Aoi.others
properties
   Activate_Entrypoint_Source_Text => "init_gui";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end Gui_Send_Tm_Aoi.others;

end Gui_Send_Tm_Aoi_Thread;
package Gui_Send_Tm_Mcp_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread Gui_Send_Tm_Mcp
features
   INPORT_Send_Tm_Mcp : in event data port DataView::Mode_Change_Packet_Buffer.impl
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  1;
        Compute_Entrypoint_Source_Text => "call_gui_send_tm_mcp"; };
   OUTPORT_State_Handler_Entrypoint_Trig_Aoi : out event port;
   OUTPORT_State_Handler_Entrypoint_Trig_Mcp : out event port;
   OUTPORT_State_Handler_Entrypoint_Trig_Pwr : out event port;
end Gui_Send_Tm_Mcp;

thread implementation Gui_Send_Tm_Mcp.others
properties
   Activate_Entrypoint_Source_Text => "init_gui";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end Gui_Send_Tm_Mcp.others;

end Gui_Send_Tm_Mcp_Thread;
package State_Handler_Entrypoint_Poll_Aoi_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread State_Handler_Entrypoint_Poll_Aoi
features
   OUTPORT_Gui_Send_Tm_Aoi : out event data port DataView::Location_Fix_Packet_Buffer.impl;
   OUTPORT_Gui_Send_Tm_Mcp : out event data port DataView::Mode_Change_Packet_Buffer.impl;
end State_Handler_Entrypoint_Poll_Aoi;

thread implementation State_Handler_Entrypoint_Poll_Aoi.others
properties
   Activate_Entrypoint_Source_Text => "init_state_handler_entrypoint";
   Compute_Entrypoint_Source_Text    => "call_state_handler_entrypoint_poll_aoi";
   Dispatch_Protocol                 => Periodic;
   Period                            => 10000 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end State_Handler_Entrypoint_Poll_Aoi.others;

end State_Handler_Entrypoint_Poll_Aoi_Thread;
package State_Handler_Entrypoint_Poll_Mcp_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread State_Handler_Entrypoint_Poll_Mcp
features
   OUTPORT_Gui_Send_Tm_Aoi : out event data port DataView::Location_Fix_Packet_Buffer.impl;
   OUTPORT_Gui_Send_Tm_Mcp : out event data port DataView::Mode_Change_Packet_Buffer.impl;
end State_Handler_Entrypoint_Poll_Mcp;

thread implementation State_Handler_Entrypoint_Poll_Mcp.others
properties
   Activate_Entrypoint_Source_Text => "init_state_handler_entrypoint";
   Compute_Entrypoint_Source_Text    => "call_state_handler_entrypoint_poll_mcp";
   Dispatch_Protocol                 => Periodic;
   Period                            => 5000 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end State_Handler_Entrypoint_Poll_Mcp.others;

end State_Handler_Entrypoint_Poll_Mcp_Thread;
package State_Handler_Entrypoint_Toggle_Pwr_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread State_Handler_Entrypoint_Toggle_Pwr
features
   OUTPORT_Gui_Send_Tm_Aoi : out event data port DataView::Location_Fix_Packet_Buffer.impl;
   OUTPORT_Gui_Send_Tm_Mcp : out event data port DataView::Mode_Change_Packet_Buffer.impl;
end State_Handler_Entrypoint_Toggle_Pwr;

thread implementation State_Handler_Entrypoint_Toggle_Pwr.others
properties
   Activate_Entrypoint_Source_Text => "init_state_handler_entrypoint";
   Compute_Entrypoint_Source_Text    => "call_state_handler_entrypoint_toggle_pwr";
   Dispatch_Protocol                 => Periodic;
   Period                            => 30000 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end State_Handler_Entrypoint_Toggle_Pwr.others;

end State_Handler_Entrypoint_Toggle_Pwr_Thread;
package State_Handler_Entrypoint_Trig_Aoi_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread State_Handler_Entrypoint_Trig_Aoi
features
   INPORT_Trig_Aoi : in event port
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  2;
        Compute_Entrypoint_Source_Text => "call_state_handler_entrypoint_trig_aoi"; };
   OUTPORT_Gui_Send_Tm_Aoi : out event data port DataView::Location_Fix_Packet_Buffer.impl;
   OUTPORT_Gui_Send_Tm_Mcp : out event data port DataView::Mode_Change_Packet_Buffer.impl;
end State_Handler_Entrypoint_Trig_Aoi;

thread implementation State_Handler_Entrypoint_Trig_Aoi.others
properties
   Activate_Entrypoint_Source_Text => "init_state_handler_entrypoint";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end State_Handler_Entrypoint_Trig_Aoi.others;

end State_Handler_Entrypoint_Trig_Aoi_Thread;
package State_Handler_Entrypoint_Trig_Mcp_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread State_Handler_Entrypoint_Trig_Mcp
features
   INPORT_Trig_Mcp : in event port
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  2;
        Compute_Entrypoint_Source_Text => "call_state_handler_entrypoint_trig_mcp"; };
   OUTPORT_Gui_Send_Tm_Aoi : out event data port DataView::Location_Fix_Packet_Buffer.impl;
   OUTPORT_Gui_Send_Tm_Mcp : out event data port DataView::Mode_Change_Packet_Buffer.impl;
end State_Handler_Entrypoint_Trig_Mcp;

thread implementation State_Handler_Entrypoint_Trig_Mcp.others
properties
   Activate_Entrypoint_Source_Text => "init_state_handler_entrypoint";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end State_Handler_Entrypoint_Trig_Mcp.others;

end State_Handler_Entrypoint_Trig_Mcp_Thread;
package State_Handler_Entrypoint_Trig_Pwr_Thread
public
   with Deployment;
   with Process_Package;
   with Dataview;

thread State_Handler_Entrypoint_Trig_Pwr
features
   INPORT_Trig_Pwr : in event port
      { Compute_Execution_Time =>  0 ms ..  0 ms;
        Queue_Size =>  2;
        Compute_Entrypoint_Source_Text => "call_state_handler_entrypoint_trig_pwr"; };
   OUTPORT_Gui_Send_Tm_Aoi : out event data port DataView::Location_Fix_Packet_Buffer.impl;
   OUTPORT_Gui_Send_Tm_Mcp : out event data port DataView::Mode_Change_Packet_Buffer.impl;
end State_Handler_Entrypoint_Trig_Pwr;

thread implementation State_Handler_Entrypoint_Trig_Pwr.others
properties
   Activate_Entrypoint_Source_Text => "init_state_handler_entrypoint";
   Dispatch_Protocol                 => Sporadic;
   Period                            => 1 ms;
   Dispatch_Offset                   =>  0 ms;
   Compute_Execution_Time            =>  0 ms ..  0 ms;
   Stack_Size                        => 0 Bytes;
   Priority                          =>  1;
end State_Handler_Entrypoint_Trig_Pwr.others;

end State_Handler_Entrypoint_Trig_Pwr_Thread;

package Process_Package
public
   with arinc653;
   with Deployment;
   with DataView;
   with interfaceview::IV;
   with deploymentview::DV;
   with deploymentview::DV::node_linux;
   with Gui_Poll_Thread;
   with Gui_Send_Tm_Aoi_Thread;
   with Gui_Send_Tm_Mcp_Thread;
   with State_Handler_Entrypoint_Poll_Aoi_Thread;
   with State_Handler_Entrypoint_Poll_Mcp_Thread;
   with State_Handler_Entrypoint_Toggle_Pwr_Thread;
   with State_Handler_Entrypoint_Trig_Aoi_Thread;
   with State_Handler_Entrypoint_Trig_Mcp_Thread;
   with State_Handler_Entrypoint_Trig_Pwr_Thread;
   with Ocarina_Processors_X86;

data TASTE_Protected
properties
   Concurrency_Control_Protocol => Protected_Access;
end TASTE_Protected;

data implementation TASTE_Protected.Object
properties
   Concurrency_Control_Protocol => Protected_Access;
end TASTE_Protected.Object;

--  Required by AIR to allow inter-partition communications
subprogram do_ports_polling
properties
   Source_Language => C;
   Source_Name     => "user_ports_polling";
   Source_Text     => ("air_polling.c");
end do_ports_polling;
thread Port_Poller
end    Port_Poller;

thread implementation Port_Poller.i
calls
   Mycalls: {
      P_Spg : subprogram do_ports_polling;
   };
properties
   Dispatch_Protocol => Periodic;
   Period            => 100 ms;
   Deadline          => 100 ms;
end Port_Poller.i;


processor node_linux_Board extends ocarina_processors_x86::x86
end node_linux_Board;

processor implementation node_linux_Board.final extends ocarina_processors_x86::x86.linux
end node_linux_Board.final;


process Demo extends DeploymentView::DV::Node_Linux::Demo
end demo;

process implementation Demo.final
subcomponents
   gui_protected : data TASTE_Protected.Object;
   
   state_handler_entrypoint_protected : data TASTE_Protected.Object;
   gui_Poll                            : thread gui_Poll_Thread::gui_Poll.others;
   gui_send_tm_aoi                     : thread gui_send_tm_aoi_Thread::gui_send_tm_aoi.others;
   gui_send_tm_mcp                     : thread gui_send_tm_mcp_Thread::gui_send_tm_mcp.others;
   state_handler_entrypoint_poll_aoi   : thread state_handler_entrypoint_poll_aoi_Thread::state_handler_entrypoint_poll_aoi.others;
   state_handler_entrypoint_poll_mcp   : thread state_handler_entrypoint_poll_mcp_Thread::state_handler_entrypoint_poll_mcp.others;
   state_handler_entrypoint_toggle_pwr : thread state_handler_entrypoint_toggle_pwr_Thread::state_handler_entrypoint_toggle_pwr.others;
   state_handler_entrypoint_trig_aoi   : thread state_handler_entrypoint_trig_aoi_Thread::state_handler_entrypoint_trig_aoi.others;
   state_handler_entrypoint_trig_mcp   : thread state_handler_entrypoint_trig_mcp_Thread::state_handler_entrypoint_trig_mcp.others;
   state_handler_entrypoint_trig_pwr   : thread state_handler_entrypoint_trig_pwr_Thread::state_handler_entrypoint_trig_pwr.others;
connections
   port Gui_Poll.OUTPORT_State_Handler_Entrypoint_Trig_Aoi          -> State_Handler_Entrypoint_Trig_Aoi.INPORT_Trig_Aoi;
   port Gui_Poll.OUTPORT_State_Handler_Entrypoint_Trig_Mcp          -> State_Handler_Entrypoint_Trig_Mcp.INPORT_Trig_Mcp;
   port Gui_Poll.OUTPORT_State_Handler_Entrypoint_Trig_Pwr          -> State_Handler_Entrypoint_Trig_Pwr.INPORT_Trig_Pwr;
   port Gui_Send_Tm_Aoi.OUTPORT_State_Handler_Entrypoint_Trig_Aoi   -> State_Handler_Entrypoint_Trig_Aoi.INPORT_Trig_Aoi;
   port Gui_Send_Tm_Aoi.OUTPORT_State_Handler_Entrypoint_Trig_Mcp   -> State_Handler_Entrypoint_Trig_Mcp.INPORT_Trig_Mcp;
   port Gui_Send_Tm_Aoi.OUTPORT_State_Handler_Entrypoint_Trig_Pwr   -> State_Handler_Entrypoint_Trig_Pwr.INPORT_Trig_Pwr;
   port Gui_Send_Tm_Mcp.OUTPORT_State_Handler_Entrypoint_Trig_Aoi   -> State_Handler_Entrypoint_Trig_Aoi.INPORT_Trig_Aoi;
   port Gui_Send_Tm_Mcp.OUTPORT_State_Handler_Entrypoint_Trig_Mcp   -> State_Handler_Entrypoint_Trig_Mcp.INPORT_Trig_Mcp;
   port Gui_Send_Tm_Mcp.OUTPORT_State_Handler_Entrypoint_Trig_Pwr   -> State_Handler_Entrypoint_Trig_Pwr.INPORT_Trig_Pwr;
   port State_Handler_Entrypoint_Poll_Aoi.OUTPORT_Gui_Send_Tm_Aoi   -> Gui_Send_Tm_Aoi.INPORT_Send_Tm_Aoi;
   port State_Handler_Entrypoint_Poll_Aoi.OUTPORT_Gui_Send_Tm_Mcp   -> Gui_Send_Tm_Mcp.INPORT_Send_Tm_Mcp;
   port State_Handler_Entrypoint_Poll_Mcp.OUTPORT_Gui_Send_Tm_Aoi   -> Gui_Send_Tm_Aoi.INPORT_Send_Tm_Aoi;
   port State_Handler_Entrypoint_Poll_Mcp.OUTPORT_Gui_Send_Tm_Mcp   -> Gui_Send_Tm_Mcp.INPORT_Send_Tm_Mcp;
   port State_Handler_Entrypoint_Toggle_Pwr.OUTPORT_Gui_Send_Tm_Aoi -> Gui_Send_Tm_Aoi.INPORT_Send_Tm_Aoi;
   port State_Handler_Entrypoint_Toggle_Pwr.OUTPORT_Gui_Send_Tm_Mcp -> Gui_Send_Tm_Mcp.INPORT_Send_Tm_Mcp;
   port State_Handler_Entrypoint_Trig_Aoi.OUTPORT_Gui_Send_Tm_Aoi   -> Gui_Send_Tm_Aoi.INPORT_Send_Tm_Aoi;
   port State_Handler_Entrypoint_Trig_Aoi.OUTPORT_Gui_Send_Tm_Mcp   -> Gui_Send_Tm_Mcp.INPORT_Send_Tm_Mcp;
   port State_Handler_Entrypoint_Trig_Mcp.OUTPORT_Gui_Send_Tm_Aoi   -> Gui_Send_Tm_Aoi.INPORT_Send_Tm_Aoi;
   port State_Handler_Entrypoint_Trig_Mcp.OUTPORT_Gui_Send_Tm_Mcp   -> Gui_Send_Tm_Mcp.INPORT_Send_Tm_Mcp;
   port State_Handler_Entrypoint_Trig_Pwr.OUTPORT_Gui_Send_Tm_Aoi   -> Gui_Send_Tm_Aoi.INPORT_Send_Tm_Aoi;
   port State_Handler_Entrypoint_Trig_Pwr.OUTPORT_Gui_Send_Tm_Mcp   -> Gui_Send_Tm_Mcp.INPORT_Send_Tm_Mcp;
end Demo.final;

system DeploymentView
end DeploymentView;

system implementation DeploymentView.final
subcomponents
   Demo : process Demo.final;
   Node_Linux_x86_linux : processor Node_Linux_Board.final;
properties
   Actual_Processor_Binding => (reference (Node_Linux_x86_linux)) applies to Demo;
--  patchable area (do not remove this line):
end DeploymentView.final;

end Process_Package;

-- deploymenttview.final
