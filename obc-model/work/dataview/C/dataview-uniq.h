#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccCounterK;


flag asn1SccCounterK_Equal(const asn1SccCounterK* pVal1, const asn1SccCounterK* pVal2);

#define ERR_COUNTERK		1  /*(0 .. 1000)*/
flag asn1SccCounterK_IsConstraintValid(const asn1SccCounterK* pVal, int* pErrCode);

void asn1SccCounterK_Initialize(asn1SccCounterK* pVal);

#define ERR_UPER_ENCODE_COUNTERK		2  /**/
#define asn1SccCounterK_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccCounterK_REQUIRED_BITS_FOR_ENCODING        10

flag asn1SccCounterK_Encode(const asn1SccCounterK* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_COUNTERK		3  /**/
flag asn1SccCounterK_Decode(asn1SccCounterK* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_COUNTERK		4  /**/
#define asn1SccCounterK_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccCounterK_REQUIRED_BITS_FOR_ACN_ENCODING        10

flag asn1SccCounterK_ACN_Encode(const asn1SccCounterK* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_COUNTERK		5  /**/
flag asn1SccCounterK_ACN_Decode(asn1SccCounterK* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccTime_UNIX;


flag asn1SccTime_UNIX_Equal(const asn1SccTime_UNIX* pVal1, const asn1SccTime_UNIX* pVal2);

#define ERR_TIME_UNIX		6  /*(0 .. 4294967294)*/
flag asn1SccTime_UNIX_IsConstraintValid(const asn1SccTime_UNIX* pVal, int* pErrCode);

void asn1SccTime_UNIX_Initialize(asn1SccTime_UNIX* pVal);

#define ERR_UPER_ENCODE_TIME_UNIX		7  /**/
#define asn1SccTime_UNIX_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccTime_UNIX_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccTime_UNIX_Encode(const asn1SccTime_UNIX* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TIME_UNIX		8  /**/
flag asn1SccTime_UNIX_Decode(asn1SccTime_UNIX* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TIME_UNIX		9  /**/
#define asn1SccTime_UNIX_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccTime_UNIX_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccTime_UNIX_ACN_Encode(const asn1SccTime_UNIX* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TIME_UNIX		10  /**/
flag asn1SccTime_UNIX_ACN_Decode(asn1SccTime_UNIX* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccLatitude_WGS84;


flag asn1SccLatitude_WGS84_Equal(const asn1SccLatitude_WGS84* pVal1, const asn1SccLatitude_WGS84* pVal2);

#define ERR_LATITUDE_WGS84		11  /*(-90.0 .. 90.0)*/
flag asn1SccLatitude_WGS84_IsConstraintValid(const asn1SccLatitude_WGS84* pVal, int* pErrCode);

void asn1SccLatitude_WGS84_Initialize(asn1SccLatitude_WGS84* pVal);

#define ERR_UPER_ENCODE_LATITUDE_WGS84		12  /**/
#define asn1SccLatitude_WGS84_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccLatitude_WGS84_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccLatitude_WGS84_Encode(const asn1SccLatitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LATITUDE_WGS84		13  /**/
flag asn1SccLatitude_WGS84_Decode(asn1SccLatitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LATITUDE_WGS84		14  /**/
#define asn1SccLatitude_WGS84_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccLatitude_WGS84_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccLatitude_WGS84_ACN_Encode(const asn1SccLatitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LATITUDE_WGS84		15  /**/
flag asn1SccLatitude_WGS84_ACN_Decode(asn1SccLatitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccLongitude_WGS84;


flag asn1SccLongitude_WGS84_Equal(const asn1SccLongitude_WGS84* pVal1, const asn1SccLongitude_WGS84* pVal2);

#define ERR_LONGITUDE_WGS84		16  /*(-180.0 .. 180.0)*/
flag asn1SccLongitude_WGS84_IsConstraintValid(const asn1SccLongitude_WGS84* pVal, int* pErrCode);

void asn1SccLongitude_WGS84_Initialize(asn1SccLongitude_WGS84* pVal);

#define ERR_UPER_ENCODE_LONGITUDE_WGS84		17  /**/
#define asn1SccLongitude_WGS84_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccLongitude_WGS84_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccLongitude_WGS84_Encode(const asn1SccLongitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LONGITUDE_WGS84		18  /**/
flag asn1SccLongitude_WGS84_Decode(asn1SccLongitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LONGITUDE_WGS84		19  /**/
#define asn1SccLongitude_WGS84_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccLongitude_WGS84_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccLongitude_WGS84_ACN_Encode(const asn1SccLongitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LONGITUDE_WGS84		20  /**/
flag asn1SccLongitude_WGS84_ACN_Decode(asn1SccLongitude_WGS84* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccLocation --------------------------------------------*/
typedef struct {
    asn1SccLatitude_WGS84 lat;
    asn1SccLongitude_WGS84 lon;

} asn1SccLocation;

flag asn1SccLocation_Equal(const asn1SccLocation* pVal1, const asn1SccLocation* pVal2);

#define ERR_LOCATION		41  /**/
#define ERR_LOCATION_LAT_2		26  /**/
#define ERR_LOCATION_LON_2		36  /**/
flag asn1SccLocation_IsConstraintValid(const asn1SccLocation* pVal, int* pErrCode);

void asn1SccLocation_Initialize(asn1SccLocation* pVal);

#define ERR_UPER_ENCODE_LOCATION		42  /**/
#define ERR_UPER_ENCODE_LOCATION_LAT_2		27  /**/
#define ERR_UPER_ENCODE_LOCATION_LON_2		37  /**/
#define asn1SccLocation_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccLocation_REQUIRED_BITS_FOR_ENCODING        208

flag asn1SccLocation_Encode(const asn1SccLocation* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LOCATION		43  /**/
#define ERR_UPER_DECODE_LOCATION_LAT_2		28  /**/
#define ERR_UPER_DECODE_LOCATION_LON_2		38  /**/
flag asn1SccLocation_Decode(asn1SccLocation* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LOCATION		44  /**/
#define ERR_ACN_ENCODE_LOCATION_LAT_2		29  /**/
#define ERR_ACN_ENCODE_LOCATION_LON_2		39  /**/
#define asn1SccLocation_REQUIRED_BYTES_FOR_ACN_ENCODING       26 
#define asn1SccLocation_REQUIRED_BITS_FOR_ACN_ENCODING        208

flag asn1SccLocation_ACN_Encode(const asn1SccLocation* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LOCATION		45  /**/
#define ERR_ACN_DECODE_LOCATION_LAT_2		30  /**/
#define ERR_ACN_DECODE_LOCATION_LON_2		40  /**/
flag asn1SccLocation_ACN_Decode(asn1SccLocation* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccLocation_Fix_Packet --------------------------------------------*/
typedef struct {
    asn1SccTime_UNIX t;
    asn1SccLatitude_WGS84 lat;
    asn1SccLongitude_WGS84 lon;

} asn1SccLocation_Fix_Packet;

flag asn1SccLocation_Fix_Packet_Equal(const asn1SccLocation_Fix_Packet* pVal1, const asn1SccLocation_Fix_Packet* pVal2);

#define ERR_LOCATION_FIX_PACKET		131  /**/
#define ERR_LOCATION_FIX_PACKET_T_2		106  /**/
#define ERR_LOCATION_FIX_PACKET_LAT_2		116  /**/
#define ERR_LOCATION_FIX_PACKET_LON_2		126  /**/
flag asn1SccLocation_Fix_Packet_IsConstraintValid(const asn1SccLocation_Fix_Packet* pVal, int* pErrCode);

void asn1SccLocation_Fix_Packet_Initialize(asn1SccLocation_Fix_Packet* pVal);

#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET		132  /**/
#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET_T_2		107  /**/
#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET_LAT_2		117  /**/
#define ERR_UPER_ENCODE_LOCATION_FIX_PACKET_LON_2		127  /**/
#define asn1SccLocation_Fix_Packet_REQUIRED_BYTES_FOR_ENCODING       30 
#define asn1SccLocation_Fix_Packet_REQUIRED_BITS_FOR_ENCODING        240

flag asn1SccLocation_Fix_Packet_Encode(const asn1SccLocation_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LOCATION_FIX_PACKET		133  /**/
#define ERR_UPER_DECODE_LOCATION_FIX_PACKET_T_2		108  /**/
#define ERR_UPER_DECODE_LOCATION_FIX_PACKET_LAT_2		118  /**/
#define ERR_UPER_DECODE_LOCATION_FIX_PACKET_LON_2		128  /**/
flag asn1SccLocation_Fix_Packet_Decode(asn1SccLocation_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET		134  /**/
#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET_T_2		109  /**/
#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET_LAT_2		119  /**/
#define ERR_ACN_ENCODE_LOCATION_FIX_PACKET_LON_2		129  /**/
#define asn1SccLocation_Fix_Packet_REQUIRED_BYTES_FOR_ACN_ENCODING       30 
#define asn1SccLocation_Fix_Packet_REQUIRED_BITS_FOR_ACN_ENCODING        240

flag asn1SccLocation_Fix_Packet_ACN_Encode(const asn1SccLocation_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LOCATION_FIX_PACKET		135  /**/
#define ERR_ACN_DECODE_LOCATION_FIX_PACKET_T_2		110  /**/
#define ERR_ACN_DECODE_LOCATION_FIX_PACKET_LAT_2		120  /**/
#define ERR_ACN_DECODE_LOCATION_FIX_PACKET_LON_2		130  /**/
flag asn1SccLocation_Fix_Packet_ACN_Decode(asn1SccLocation_Fix_Packet* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccTemperature_Generic;


flag asn1SccTemperature_Generic_Equal(const asn1SccTemperature_Generic* pVal1, const asn1SccTemperature_Generic* pVal2);

#define ERR_TEMPERATURE_GENERIC		46  /*(-200.0 .. 200.0)*/
flag asn1SccTemperature_Generic_IsConstraintValid(const asn1SccTemperature_Generic* pVal, int* pErrCode);

void asn1SccTemperature_Generic_Initialize(asn1SccTemperature_Generic* pVal);

#define ERR_UPER_ENCODE_TEMPERATURE_GENERIC		47  /**/
#define asn1SccTemperature_Generic_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccTemperature_Generic_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccTemperature_Generic_Encode(const asn1SccTemperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TEMPERATURE_GENERIC		48  /**/
flag asn1SccTemperature_Generic_Decode(asn1SccTemperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TEMPERATURE_GENERIC		49  /**/
#define asn1SccTemperature_Generic_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccTemperature_Generic_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccTemperature_Generic_ACN_Encode(const asn1SccTemperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TEMPERATURE_GENERIC		50  /**/
flag asn1SccTemperature_Generic_ACN_Decode(asn1SccTemperature_Generic* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccDeployment_Digital;


flag asn1SccDeployment_Digital_Equal(const asn1SccDeployment_Digital* pVal1, const asn1SccDeployment_Digital* pVal2);

#define ERR_DEPLOYMENT_DIGITAL		51  /**/
flag asn1SccDeployment_Digital_IsConstraintValid(const asn1SccDeployment_Digital* pVal, int* pErrCode);

void asn1SccDeployment_Digital_Initialize(asn1SccDeployment_Digital* pVal);

#define ERR_UPER_ENCODE_DEPLOYMENT_DIGITAL		52  /**/
#define asn1SccDeployment_Digital_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccDeployment_Digital_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccDeployment_Digital_Encode(const asn1SccDeployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DEPLOYMENT_DIGITAL		53  /**/
flag asn1SccDeployment_Digital_Decode(asn1SccDeployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DEPLOYMENT_DIGITAL		54  /**/
#define asn1SccDeployment_Digital_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccDeployment_Digital_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccDeployment_Digital_ACN_Encode(const asn1SccDeployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DEPLOYMENT_DIGITAL		55  /**/
flag asn1SccDeployment_Digital_ACN_Decode(asn1SccDeployment_Digital* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccDeployment_Analogue;


flag asn1SccDeployment_Analogue_Equal(const asn1SccDeployment_Analogue* pVal1, const asn1SccDeployment_Analogue* pVal2);

#define ERR_DEPLOYMENT_ANALOGUE		56  /*(0.0 .. 100.0)*/
flag asn1SccDeployment_Analogue_IsConstraintValid(const asn1SccDeployment_Analogue* pVal, int* pErrCode);

void asn1SccDeployment_Analogue_Initialize(asn1SccDeployment_Analogue* pVal);

#define ERR_UPER_ENCODE_DEPLOYMENT_ANALOGUE		57  /**/
#define asn1SccDeployment_Analogue_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccDeployment_Analogue_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccDeployment_Analogue_Encode(const asn1SccDeployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DEPLOYMENT_ANALOGUE		58  /**/
flag asn1SccDeployment_Analogue_Decode(asn1SccDeployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DEPLOYMENT_ANALOGUE		59  /**/
#define asn1SccDeployment_Analogue_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define asn1SccDeployment_Analogue_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag asn1SccDeployment_Analogue_ACN_Encode(const asn1SccDeployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DEPLOYMENT_ANALOGUE		60  /**/
flag asn1SccDeployment_Analogue_ACN_Decode(asn1SccDeployment_Analogue* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccSystem_Mode;


flag asn1SccSystem_Mode_Equal(const asn1SccSystem_Mode* pVal1, const asn1SccSystem_Mode* pVal2);

#define ERR_SYSTEM_MODE		61  /*(0 .. 4)*/
flag asn1SccSystem_Mode_IsConstraintValid(const asn1SccSystem_Mode* pVal, int* pErrCode);

void asn1SccSystem_Mode_Initialize(asn1SccSystem_Mode* pVal);

#define ERR_UPER_ENCODE_SYSTEM_MODE		62  /**/
#define asn1SccSystem_Mode_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccSystem_Mode_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccSystem_Mode_Encode(const asn1SccSystem_Mode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SYSTEM_MODE		63  /**/
flag asn1SccSystem_Mode_Decode(asn1SccSystem_Mode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SYSTEM_MODE		64  /**/
#define asn1SccSystem_Mode_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccSystem_Mode_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccSystem_Mode_ACN_Encode(const asn1SccSystem_Mode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SYSTEM_MODE		65  /**/
flag asn1SccSystem_Mode_ACN_Decode(asn1SccSystem_Mode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccSubsystem_Address;


flag asn1SccSubsystem_Address_Equal(const asn1SccSubsystem_Address* pVal1, const asn1SccSubsystem_Address* pVal2);

#define ERR_SUBSYSTEM_ADDRESS		66  /*(0 .. 6)*/
flag asn1SccSubsystem_Address_IsConstraintValid(const asn1SccSubsystem_Address* pVal, int* pErrCode);

void asn1SccSubsystem_Address_Initialize(asn1SccSubsystem_Address* pVal);

#define ERR_UPER_ENCODE_SUBSYSTEM_ADDRESS		67  /**/
#define asn1SccSubsystem_Address_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccSubsystem_Address_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccSubsystem_Address_Encode(const asn1SccSubsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SUBSYSTEM_ADDRESS		68  /**/
flag asn1SccSubsystem_Address_Decode(asn1SccSubsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SUBSYSTEM_ADDRESS		69  /**/
#define asn1SccSubsystem_Address_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccSubsystem_Address_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccSubsystem_Address_ACN_Encode(const asn1SccSubsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SUBSYSTEM_ADDRESS		70  /**/
flag asn1SccSubsystem_Address_ACN_Decode(asn1SccSubsystem_Address* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMode_Change_Packet --------------------------------------------*/
typedef asn1SccUint asn1SccMode_Change_Packet_ttl_ms;

typedef struct {
    asn1SccSubsystem_Address target_addr;
    asn1SccSystem_Mode target_mode;
    asn1SccMode_Change_Packet_ttl_ms ttl_ms;

} asn1SccMode_Change_Packet;

flag asn1SccMode_Change_Packet_ttl_ms_Equal(const asn1SccMode_Change_Packet_ttl_ms* pVal1, const asn1SccMode_Change_Packet_ttl_ms* pVal2);

flag asn1SccMode_Change_Packet_Equal(const asn1SccMode_Change_Packet* pVal1, const asn1SccMode_Change_Packet* pVal2);

#define ERR_MODE_CHANGE_PACKET_TTL_MS		91  /*(0 .. 10000)*/
flag asn1SccMode_Change_Packet_ttl_ms_IsConstraintValid(const asn1SccMode_Change_Packet_ttl_ms* pVal, int* pErrCode);

#define ERR_MODE_CHANGE_PACKET		96  /**/
#define ERR_MODE_CHANGE_PACKET_TARGET_ADDR_2		76  /**/
#define ERR_MODE_CHANGE_PACKET_TARGET_MODE_2		86  /**/
flag asn1SccMode_Change_Packet_IsConstraintValid(const asn1SccMode_Change_Packet* pVal, int* pErrCode);

void asn1SccMode_Change_Packet_ttl_ms_Initialize(asn1SccMode_Change_Packet_ttl_ms* pVal);
void asn1SccMode_Change_Packet_Initialize(asn1SccMode_Change_Packet* pVal);

#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET		97  /**/
#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		77  /**/
#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET_TARGET_MODE_2		87  /**/
#define ERR_UPER_ENCODE_MODE_CHANGE_PACKET_TTL_MS		92  /**/
#define asn1SccMode_Change_Packet_REQUIRED_BYTES_FOR_ENCODING       3 
#define asn1SccMode_Change_Packet_REQUIRED_BITS_FOR_ENCODING        20

flag asn1SccMode_Change_Packet_Encode(const asn1SccMode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MODE_CHANGE_PACKET		98  /**/
#define ERR_UPER_DECODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		78  /**/
#define ERR_UPER_DECODE_MODE_CHANGE_PACKET_TARGET_MODE_2		88  /**/
#define ERR_UPER_DECODE_MODE_CHANGE_PACKET_TTL_MS		93  /**/
flag asn1SccMode_Change_Packet_Decode(asn1SccMode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET		99  /**/
#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		79  /**/
#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET_TARGET_MODE_2		89  /**/
#define ERR_ACN_ENCODE_MODE_CHANGE_PACKET_TTL_MS		94  /**/
#define asn1SccMode_Change_Packet_REQUIRED_BYTES_FOR_ACN_ENCODING       3 
#define asn1SccMode_Change_Packet_REQUIRED_BITS_FOR_ACN_ENCODING        20

flag asn1SccMode_Change_Packet_ACN_Encode(const asn1SccMode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MODE_CHANGE_PACKET		100  /**/
#define ERR_ACN_DECODE_MODE_CHANGE_PACKET_TARGET_ADDR_2		80  /**/
#define ERR_ACN_DECODE_MODE_CHANGE_PACKET_TARGET_MODE_2		90  /**/
#define ERR_ACN_DECODE_MODE_CHANGE_PACKET_TTL_MS		95  /**/
flag asn1SccMode_Change_Packet_ACN_Decode(asn1SccMode_Change_Packet* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

#define ERR_T_INT32		136  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		137  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		138  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		139  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		140  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

#define ERR_T_UINT32		141  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		142  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		143  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		144  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		145  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

#define ERR_T_INT8		146  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		147  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		148  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		149  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		150  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

#define ERR_T_UINT8		151  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		152  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		153  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		154  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		155  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

#define ERR_T_BOOLEAN		156  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		157  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		158  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		159  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		160  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

#define ERR_T_NULL_RECORD		161  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_gui = 0,
    PID_loc_provider = 1,
    PID_state_handler_entrypoint = 2,
    PID_tc_provider = 3,
    PID_tc_validation = 4,
    PID_tm_collection = 5,
    PID_tm_provider = 6,
    PID_env = 7
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_gui PID_gui
#define asn1SccPID_loc_provider PID_loc_provider
#define asn1SccPID_state_handler_entrypoint PID_state_handler_entrypoint
#define asn1SccPID_tc_provider PID_tc_provider
#define asn1SccPID_tc_validation PID_tc_validation
#define asn1SccPID_tm_collection PID_tm_collection
#define asn1SccPID_tm_provider PID_tm_provider
#define asn1SccPID_env PID_env

flag asn1SccPID_Equal(const asn1SccPID* pVal1, const asn1SccPID* pVal2);

#define ERR_PID		166  /*gui | loc-provider | state-handler-entrypoint | tc-provider | tc-validation | tm-collection | tm-provider | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		167  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		168  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PID		169  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccPID_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccPID_ACN_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PID		170  /**/
flag asn1SccPID_ACN_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
