pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");

pragma Warnings (Off, "no entities of ""OBC_MODEL_DATAVIEW"" are referenced");
pragma Warnings (Off, "use clause for package ""OBC_MODEL_DATAVIEW"" has no effect");
pragma Warnings (Off, "unit ""OBC_MODEL_DATAVIEW"" is not referenced");
with OBC_MODEL_DATAVIEW;
pragma Warnings (On, "no entities of ""OBC_MODEL_DATAVIEW"" are referenced");
pragma Warnings (On, "use clause for package ""OBC_MODEL_DATAVIEW"" has no effect");
pragma Warnings (On, "unit ""OBC_MODEL_DATAVIEW"" is not referenced");

pragma Warnings (On, "redundant with clause in body");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through previous use_type_clause at");
use type OBC_MODEL_DATAVIEW.asn1SccCounterK;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through previous use_type_clause at");
package body Context_tm_provider with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccContext_tm_provider_Equal (val1, val2 :  asn1SccContext_tm_provider) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.k = val2.k);

	return ret;

end asn1SccContext_tm_provider_Equal;

function asn1SccContext_tm_provider_IsConstraintValid(val : asn1SccContext_tm_provider) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := OBC_MODEL_DATAVIEW.asn1SccCounterK_IsConstraintValid(val.k);
    return ret;
end asn1SccContext_tm_provider_IsConstraintValid;




pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end Context_tm_provider;