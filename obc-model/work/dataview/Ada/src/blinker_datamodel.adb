pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body Blinker_Datamodel with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccBlinker_States_Equal (val1, val2 :  asn1SccBlinker_States) return Boolean
is

begin
	return val1 = val2;

end asn1SccBlinker_States_Equal;

function asn1SccBlinker_States_IsConstraintValid(val : asn1SccBlinker_States) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret.Success := (val = asn1Sccwait);
    ret.ErrorCode := (if ret.Success then 0 else ERR_BLINKER_STATES);
    return ret;
end asn1SccBlinker_States_IsConstraintValid;





function asn1SccBlinker_Context_Equal (val1, val2 :  asn1SccBlinker_Context) return Boolean
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ""ret"" has no effect");

begin
    ret := (val1.state = val2.state);

    if ret then
        ret := (val1.init_done = val2.init_done);

    end if;
	return ret;

end asn1SccBlinker_Context_Equal;

function asn1SccBlinker_Context_IsConstraintValid(val : asn1SccBlinker_Context) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ""ret"" has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ""ret"" has no effect");        
begin
    ret := asn1SccBlinker_States_IsConstraintValid(val.state);
    return ret;
end asn1SccBlinker_Context_IsConstraintValid;




pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end Blinker_Datamodel;