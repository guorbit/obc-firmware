pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");

pragma Warnings (Off, "no entities of ""OBC_MODEL_DATAVIEW"" are referenced");
pragma Warnings (Off, "use clause for package ""OBC_MODEL_DATAVIEW"" has no effect");
pragma Warnings (Off, "unit ""OBC_MODEL_DATAVIEW"" is not referenced");
with OBC_MODEL_DATAVIEW;
pragma Warnings (On, "no entities of ""OBC_MODEL_DATAVIEW"" are referenced");
pragma Warnings (On, "use clause for package ""OBC_MODEL_DATAVIEW"" has no effect");
pragma Warnings (On, "unit ""OBC_MODEL_DATAVIEW"" is not referenced");

pragma Warnings (On, "redundant with clause in body");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through previous use_type_clause at");
use type OBC_MODEL_DATAVIEW.asn1SccLocation_Fix_Packet;
use type OBC_MODEL_DATAVIEW.asn1SccTime_UNIX;
use type OBC_MODEL_DATAVIEW.asn1SccLatitude_WGS84;
use type OBC_MODEL_DATAVIEW.asn1SccLongitude_WGS84;
use type OBC_MODEL_DATAVIEW.asn1SccMode_Change_Packet_ttl_ms;
use type OBC_MODEL_DATAVIEW.asn1SccMode_Change_Packet;
use type OBC_MODEL_DATAVIEW.asn1SccSubsystem_Address;
use type OBC_MODEL_DATAVIEW.asn1SccSystem_Mode;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through previous use_type_clause at");
package body GUI_SUBTYPE with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


    function asn1SccGui_send_tm_aoi_lfp_Equal (val1, val2 : asn1SccGui_send_tm_aoi_lfp) return Boolean 
    is
        pragma Warnings (Off, "initialization of ret has no effect");        
        ret : Boolean := True;
        pragma Warnings (On, "initialization of ret has no effect");        
    begin
        ret := OBC_MODEL_DATAVIEW.asn1SccLocation_Fix_Packet_Equal(val1, val2);
        return ret;
    end asn1SccGui_send_tm_aoi_lfp_Equal;

function asn1SccGui_send_tm_aoi_lfp_IsConstraintValid(val : asn1SccGui_send_tm_aoi_lfp) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := OBC_MODEL_DATAVIEW.asn1SccLocation_Fix_Packet_IsConstraintValid(val);
    return ret;
end asn1SccGui_send_tm_aoi_lfp_IsConstraintValid;

function asn1SccGui_send_tm_aoi_lfp_Init return asn1SccGui_send_tm_aoi_lfp
is
    val: asn1SccGui_send_tm_aoi_lfp;
begin
    val := OBC_MODEL_DATAVIEW.asn1SccLocation_Fix_Packet_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccGui_send_tm_aoi_lfp_Init;



    function asn1SccGui_send_tm_mcp_mcp_Equal (val1, val2 : asn1SccGui_send_tm_mcp_mcp) return Boolean 
    is
        pragma Warnings (Off, "initialization of ret has no effect");        
        ret : Boolean := True;
        pragma Warnings (On, "initialization of ret has no effect");        
    begin
        ret := OBC_MODEL_DATAVIEW.asn1SccMode_Change_Packet_Equal(val1, val2);
        return ret;
    end asn1SccGui_send_tm_mcp_mcp_Equal;

function asn1SccGui_send_tm_mcp_mcp_IsConstraintValid(val : asn1SccGui_send_tm_mcp_mcp) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := OBC_MODEL_DATAVIEW.asn1SccMode_Change_Packet_IsConstraintValid(val);
    return ret;
end asn1SccGui_send_tm_mcp_mcp_IsConstraintValid;

function asn1SccGui_send_tm_mcp_mcp_Init return asn1SccGui_send_tm_mcp_mcp
is
    val: asn1SccGui_send_tm_mcp_mcp;
begin
    val := OBC_MODEL_DATAVIEW.asn1SccMode_Change_Packet_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccGui_send_tm_mcp_mcp_Init;


pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end GUI_SUBTYPE;