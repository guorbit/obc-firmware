--  This file was generated by TASTE: DO NOT EDIT

with Ada.Iterator_Interfaces,
     Ada.Finalization,
     Interfaces,
     Ada.Strings,
     Ada.Strings.Fixed,
     adaasn1rtl,
     ASN1_Ada_Iterators,
     ASN1_Iterators.Generic_Integer,
     ASN1_Iterators.Generic_Real,
     ASN1_Iterators.Generic_Unsigned_Integer,
     ASN1_Iterators.Generic_Enumerated,
     ASN1_Iterators.Generic_Fixed_Octet_String,
     ASN1_Iterators.Generic_SeqOf;

pragma Unreferenced (ASN1_Ada_Iterators);

use Ada.Finalization,
    Ada.Strings,
    Ada.Strings.Fixed,
    Interfaces,
    adaasn1rtl,
    ASN1_Iterators;

package ASN1_Ada_Iterators.Iterators is

   package CounterK_Pkg is
      function Is_Constraint_Valid (Val : asn1SccCounterK) return Boolean is
         (asn1SccCounterK_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccCounterK,
                                       Init => asn1SccCounterK_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccCounterK) return asn1SccCounterK is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccCounterK) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end CounterK_Pkg;
   package Time_UNIX_Pkg is
      function Is_Constraint_Valid (Val : asn1SccTime_UNIX) return Boolean is
         (asn1SccTime_UNIX_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccTime_UNIX,
                                       Init => asn1SccTime_UNIX_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccTime_UNIX) return asn1SccTime_UNIX is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccTime_UNIX) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end Time_UNIX_Pkg;
   package Latitude_WGS84_Pkg is
      function Is_Constraint_Valid (Val : asn1SccLatitude_WGS84) return Boolean is
         (asn1SccLatitude_WGS84_IsConstraintValid (Val).Success);
      package Inner is new Generic_Real (Sort      => asn1SccLatitude_WGS84,
                                         Init      => asn1SccLatitude_WGS84_Init,
                                         Is_Constraint_Valid =>
                                            Is_Constraint_Valid,
                                         Max       => Long_Float (90.0),
                                         Increment => 0.5);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccLatitude_WGS84) return asn1SccLatitude_WGS84 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccLatitude_WGS84) return String is (Elm'Img);
   end Latitude_WGS84_Pkg;
   package Longitude_WGS84_Pkg is
      function Is_Constraint_Valid (Val : asn1SccLongitude_WGS84) return Boolean is
         (asn1SccLongitude_WGS84_IsConstraintValid (Val).Success);
      package Inner is new Generic_Real (Sort      => asn1SccLongitude_WGS84,
                                         Init      => asn1SccLongitude_WGS84_Init,
                                         Is_Constraint_Valid =>
                                            Is_Constraint_Valid,
                                         Max       => Long_Float (180.0),
                                         Increment => 0.5);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccLongitude_WGS84) return asn1SccLongitude_WGS84 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccLongitude_WGS84) return String is (Elm'Img);
   end Longitude_WGS84_Pkg;
   package Location_Pkg is
      package P_lat renames Latitude_WGS84_Pkg.It;
      package P_lon renames Longitude_WGS84_Pkg.It;

      type Iterator;

      type ASN1_Container is new Controlled with record
         lat_val : P_lat.ASN1_Container;
         lat_it  : P_lat.Iterator;
         lon_val : P_lon.ASN1_Container;
         lon_it  : P_lon.Iterator;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccLocation,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean;

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item     : Iterator) return Cursor;
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccLocation is
         (lat => Latitude_WGS84_Pkg.To_ASN1 (Container.lat_val.Element (Container.lat_it.Position)),
          lon => Longitude_WGS84_Pkg.To_ASN1 (Container.lon_val.Element (Container.lon_it.Position)));

      function To_ASN1 (From : asn1SccLocation) return asn1SccLocation is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccLocation) return String;
   end Location_Pkg;
   package Location_Fix_Packet_Pkg is
      package P_t renames Time_UNIX_Pkg.It;
      package P_lat renames Latitude_WGS84_Pkg.It;
      package P_lon renames Longitude_WGS84_Pkg.It;

      type Iterator;

      type ASN1_Container is new Controlled with record
         t_val : P_t.ASN1_Container;
         t_it  : P_t.Iterator;
         lat_val : P_lat.ASN1_Container;
         lat_it  : P_lat.Iterator;
         lon_val : P_lon.ASN1_Container;
         lon_it  : P_lon.Iterator;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccLocation_Fix_Packet,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean;

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item     : Iterator) return Cursor;
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccLocation_Fix_Packet is
         (t => Time_UNIX_Pkg.To_ASN1 (Container.t_val.Element (Container.t_it.Position)),
          lat => Latitude_WGS84_Pkg.To_ASN1 (Container.lat_val.Element (Container.lat_it.Position)),
          lon => Longitude_WGS84_Pkg.To_ASN1 (Container.lon_val.Element (Container.lon_it.Position)));

      function To_ASN1 (From : asn1SccLocation_Fix_Packet) return asn1SccLocation_Fix_Packet is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccLocation_Fix_Packet) return String;
   end Location_Fix_Packet_Pkg;
   package Temperature_Generic_Pkg is
      function Is_Constraint_Valid (Val : asn1SccTemperature_Generic) return Boolean is
         (asn1SccTemperature_Generic_IsConstraintValid (Val).Success);
      package Inner is new Generic_Real (Sort      => asn1SccTemperature_Generic,
                                         Init      => asn1SccTemperature_Generic_Init,
                                         Is_Constraint_Valid =>
                                            Is_Constraint_Valid,
                                         Max       => Long_Float (200.0),
                                         Increment => 0.5);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccTemperature_Generic) return asn1SccTemperature_Generic is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccTemperature_Generic) return String is (Elm'Img);
   end Temperature_Generic_Pkg;
   package Deployment_Digital_Pkg is
      package Inner is new Generic_Enumerated (Sort => asn1SccDeployment_Digital);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccDeployment_Digital) return asn1SccDeployment_Digital is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccDeployment_Digital) return String;
   end Deployment_Digital_Pkg;
   package Deployment_Analogue_Pkg is
      function Is_Constraint_Valid (Val : asn1SccDeployment_Analogue) return Boolean is
         (asn1SccDeployment_Analogue_IsConstraintValid (Val).Success);
      package Inner is new Generic_Real (Sort      => asn1SccDeployment_Analogue,
                                         Init      => asn1SccDeployment_Analogue_Init,
                                         Is_Constraint_Valid =>
                                            Is_Constraint_Valid,
                                         Max       => Long_Float (100.0),
                                         Increment => 0.5);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccDeployment_Analogue) return asn1SccDeployment_Analogue is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccDeployment_Analogue) return String is (Elm'Img);
   end Deployment_Analogue_Pkg;
   package System_Mode_Pkg is
      package Inner is new Generic_Enumerated (Sort => asn1SccSystem_Mode);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccSystem_Mode) return asn1SccSystem_Mode is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccSystem_Mode) return String;
   end System_Mode_Pkg;
   package Subsystem_Address_Pkg is
      package Inner is new Generic_Enumerated (Sort => asn1SccSubsystem_Address);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccSubsystem_Address) return asn1SccSubsystem_Address is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccSubsystem_Address) return String;
   end Subsystem_Address_Pkg;
   package Mode_Change_Packet_ttl_ms_Pkg is
      function Is_Constraint_Valid (Val : asn1SccMode_Change_Packet_ttl_ms) return Boolean is
         (asn1SccMode_Change_Packet_ttl_ms_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccMode_Change_Packet_ttl_ms,
                                       Init => asn1SccMode_Change_Packet_ttl_ms_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccMode_Change_Packet_ttl_ms) return asn1SccMode_Change_Packet_ttl_ms is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccMode_Change_Packet_ttl_ms) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end Mode_Change_Packet_ttl_ms_Pkg;
   package Mode_Change_Packet_Pkg is
      package P_target_addr renames Subsystem_Address_Pkg.It;
      package P_target_mode renames System_Mode_Pkg.It;
      package P_ttl_ms renames Mode_Change_Packet_ttl_ms_Pkg.It;

      type Iterator;

      type ASN1_Container is new Controlled with record
         target_addr_val : P_target_addr.ASN1_Container;
         target_addr_it  : P_target_addr.Iterator;
         target_mode_val : P_target_mode.ASN1_Container;
         target_mode_it  : P_target_mode.Iterator;
         ttl_ms_val : P_ttl_ms.ASN1_Container;
         ttl_ms_it  : P_ttl_ms.Iterator;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccMode_Change_Packet,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean;

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item     : Iterator) return Cursor;
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccMode_Change_Packet is
         (target_addr => Subsystem_Address_Pkg.To_ASN1 (Container.target_addr_val.Element (Container.target_addr_it.Position)),
          target_mode => System_Mode_Pkg.To_ASN1 (Container.target_mode_val.Element (Container.target_mode_it.Position)),
          ttl_ms => Mode_Change_Packet_ttl_ms_Pkg.To_ASN1 (Container.ttl_ms_val.Element (Container.ttl_ms_it.Position)));

      function To_ASN1 (From : asn1SccMode_Change_Packet) return asn1SccMode_Change_Packet is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccMode_Change_Packet) return String;
   end Mode_Change_Packet_Pkg;
   package T_Int32_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_Int32) return Boolean is
         (asn1SccT_Int32_IsConstraintValid (Val).Success);
      package Inner is new Generic_Integer (Sort => asn1SccT_Int32,
                                            Init => asn1SccT_Int32_Init,
                                            Is_Constraint_Valid =>
                                               Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_Int32) return asn1SccT_Int32 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_Int32) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_Int32_Pkg;
   package T_UInt32_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_UInt32) return Boolean is
         (asn1SccT_UInt32_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccT_UInt32,
                                       Init => asn1SccT_UInt32_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_UInt32) return asn1SccT_UInt32 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_UInt32) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_UInt32_Pkg;
   package T_Int8_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_Int8) return Boolean is
         (asn1SccT_Int8_IsConstraintValid (Val).Success);
      package Inner is new Generic_Integer (Sort => asn1SccT_Int8,
                                            Init => asn1SccT_Int8_Init,
                                            Is_Constraint_Valid =>
                                               Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_Int8) return asn1SccT_Int8 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_Int8) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_Int8_Pkg;
   package T_UInt8_Pkg is
      function Is_Constraint_Valid (Val : asn1SccT_UInt8) return Boolean is
         (asn1SccT_UInt8_IsConstraintValid (Val).Success);
      package Inner is
         new Generic_Unsigned_Integer (Sort => asn1SccT_UInt8,
                                       Init => asn1SccT_UInt8_Init,
                                       Is_Constraint_Valid =>
                                           Is_Constraint_Valid);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_UInt8) return asn1SccT_UInt8 is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_UInt8) return String is
         (Ada.Strings.Fixed.Trim (Elm'Img, Both));
   end T_UInt8_Pkg;
   package T_Boolean_Pkg is
      package Inner is new Generic_Enumerated (Sort => asn1SccT_Boolean);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccT_Boolean) return asn1SccT_Boolean is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccT_Boolean) return String;
   end T_Boolean_Pkg;
   package T_Null_Record_Pkg is
      type Iterator;

      type ASN1_Container is new Controlled with record
         Single_Value : Boolean := True;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccT_Null_Record,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean is
         (Position.Single_Value);

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item : Iterator) return Cursor is (Item.Position);
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccT_Null_Record is
         (null record);

      function To_ASN1 (From : asn1SccT_Null_Record) return asn1SccT_Null_Record is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccT_Null_Record) return String is ("{}");
   end T_Null_Record_Pkg;
   package PID_Pkg is
      package Inner is new Generic_Enumerated (Sort => asn1SccPID);
      package It renames Inner.It;
      function To_ASN1 (From : asn1SccPID) return asn1SccPID is (From);
      subtype Instance is Inner.Instance;
      function Image (Elm : asn1SccPID) return String;
   end PID_Pkg;
   package Gui_send_tm_aoi_lfp_Pkg is
      package P_t renames Time_UNIX_Pkg.It;
      package P_lat renames Latitude_WGS84_Pkg.It;
      package P_lon renames Longitude_WGS84_Pkg.It;

      type Iterator;

      type ASN1_Container is new Controlled with record
         t_val : P_t.ASN1_Container;
         t_it  : P_t.Iterator;
         lat_val : P_lat.ASN1_Container;
         lat_it  : P_lat.Iterator;
         lon_val : P_lon.ASN1_Container;
         lon_it  : P_lon.Iterator;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccGui_send_tm_aoi_lfp,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean;

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item     : Iterator) return Cursor;
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccGui_send_tm_aoi_lfp is
         (t => Time_UNIX_Pkg.To_ASN1 (Container.t_val.Element (Container.t_it.Position)),
          lat => Latitude_WGS84_Pkg.To_ASN1 (Container.lat_val.Element (Container.lat_it.Position)),
          lon => Longitude_WGS84_Pkg.To_ASN1 (Container.lon_val.Element (Container.lon_it.Position)));

      function To_ASN1 (From : asn1SccGui_send_tm_aoi_lfp) return asn1SccGui_send_tm_aoi_lfp is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccGui_send_tm_aoi_lfp) return String;
   end Gui_send_tm_aoi_lfp_Pkg;
   package Gui_send_tm_mcp_mcp_Pkg is
      package P_target_addr renames Subsystem_Address_Pkg.It;
      package P_target_mode renames System_Mode_Pkg.It;
      package P_ttl_ms renames Mode_Change_Packet_ttl_ms_Pkg.It;

      type Iterator;

      type ASN1_Container is new Controlled with record
         target_addr_val : P_target_addr.ASN1_Container;
         target_addr_it  : P_target_addr.Iterator;
         target_mode_val : P_target_mode.ASN1_Container;
         target_mode_it  : P_target_mode.Iterator;
         ttl_ms_val : P_ttl_ms.ASN1_Container;
         ttl_ms_it  : P_ttl_ms.Iterator;
      end record
         with Default_Iterator  => Iterate,
              Iterator_Element  => asn1SccGui_send_tm_mcp_mcp,
              Constant_Indexing => Element;

      type Cursor is access all ASN1_Container;

      --  Constructor (called automatically)
      procedure Initialize (Container : in out ASN1_Container);

      function Has_Element (Position : Cursor) return Boolean;

      package Iterators is
         new Ada.Iterator_Interfaces (Cursor, Has_Element);

      type Iterator is new Iterators.Forward_Iterator with record
         Position : Cursor;
      end record;

      function Get_Cursor (Item : Iterator) return Cursor is (Item.Position);

      overriding function First (Item     : Iterator) return Cursor;
      overriding function Next  (Item     : Iterator;
                                 Position : Cursor) return Cursor;

      function Iterate (Container : ASN1_Container) return Iterator'Class;

      function Element (Container : ASN1_Container;
                        Position  : Cursor) return asn1SccGui_send_tm_mcp_mcp is
         (target_addr => Subsystem_Address_Pkg.To_ASN1 (Container.target_addr_val.Element (Container.target_addr_it.Position)),
          target_mode => System_Mode_Pkg.To_ASN1 (Container.target_mode_val.Element (Container.target_mode_it.Position)),
          ttl_ms => Mode_Change_Packet_ttl_ms_Pkg.To_ASN1 (Container.ttl_ms_val.Element (Container.ttl_ms_it.Position)));

      function To_ASN1 (From : asn1SccGui_send_tm_mcp_mcp) return asn1SccGui_send_tm_mcp_mcp is (From);

      subtype Instance is ASN1_Container;
      function Image (Elm : asn1SccGui_send_tm_mcp_mcp) return String;
   end Gui_send_tm_mcp_mcp_Pkg;

end ASN1_Ada_Iterators.Iterators;
