--  This file was generated by TASTE: DO NOT EDIT

with Ada.Strings,
     Ada.Strings.Fixed,
     Ada.Strings.Unbounded,
     Ada.Characters.Handling;

use Ada.Strings,
    Ada.Strings.Fixed,
    Ada.Strings.Unbounded,
    Ada.Characters.Handling;

package body ASN1_Ada_Iterators.Iterators is

   package body Location_Pkg is

      procedure Initialize (Container : in out ASN1_Container) is
      begin
         Container.lat_it := P_lat.Iterator (Container.lat_val.Iterate);
         Container.lon_it := P_lon.Iterator (Container.lon_val.Iterate);
      end Initialize;

      function Has_Element (Position : Cursor) return Boolean is
         (P_lat.Has_Element
            (Position.lat_it.Get_Cursor));

      function Iterate (Container : ASN1_Container) return Iterator'Class is
      begin
         return I : Iterator do
            I.Position := Container'Unrestricted_Access;
         end return;
      end Iterate;

      function First (Item : Iterator) return Cursor is
         unused_Cursor_lat : P_lat.Cursor := Item.Position.lat_it.First;
         unused_Cursor_lon : P_lon.Cursor := Item.Position.lon_it.First;
      begin
         return Item.Position;
      end First;

      function Next (Item     : Iterator;
                     Position : Cursor) return Cursor is
         pragma Unreferenced (Item);
         Cursor_lat : P_lat.Cursor := Position.lat_it.Get_Cursor;
         Cursor_lon : P_lon.Cursor := Position.lon_it.Get_Cursor;
      begin
         --  Iterate on the last field then on the previous ones
         Cursor_lon := Position.lon_it.Next (Cursor_lon);
         if not P_lon.Has_Element (Cursor_lon) then
            Cursor_lon := Position.lon_it.First;
            Cursor_lat := Position.lat_it.Next (Cursor_lat);
         end if;

         return Position;
      end Next;

      function Image (Elm : asn1SccLocation) return String is
      begin
         return "{"
                & "lat " & Latitude_WGS84_Pkg.Image (Elm.lat)
                & ", "
                & "lon " & Longitude_WGS84_Pkg.Image (Elm.lon)
                & "}";
      end Image;
   end Location_Pkg;
   package body Location_Fix_Packet_Pkg is

      procedure Initialize (Container : in out ASN1_Container) is
      begin
         Container.t_it := P_t.Iterator (Container.t_val.Iterate);
         Container.lat_it := P_lat.Iterator (Container.lat_val.Iterate);
         Container.lon_it := P_lon.Iterator (Container.lon_val.Iterate);
      end Initialize;

      function Has_Element (Position : Cursor) return Boolean is
         (P_t.Has_Element
            (Position.t_it.Get_Cursor));

      function Iterate (Container : ASN1_Container) return Iterator'Class is
      begin
         return I : Iterator do
            I.Position := Container'Unrestricted_Access;
         end return;
      end Iterate;

      function First (Item : Iterator) return Cursor is
         unused_Cursor_t : P_t.Cursor := Item.Position.t_it.First;
         unused_Cursor_lat : P_lat.Cursor := Item.Position.lat_it.First;
         unused_Cursor_lon : P_lon.Cursor := Item.Position.lon_it.First;
      begin
         return Item.Position;
      end First;

      function Next (Item     : Iterator;
                     Position : Cursor) return Cursor is
         pragma Unreferenced (Item);
         Cursor_t : P_t.Cursor := Position.t_it.Get_Cursor;
         Cursor_lat : P_lat.Cursor := Position.lat_it.Get_Cursor;
         Cursor_lon : P_lon.Cursor := Position.lon_it.Get_Cursor;
      begin
         --  Iterate on the last field then on the previous ones
         Cursor_lon := Position.lon_it.Next (Cursor_lon);
         if not P_lon.Has_Element (Cursor_lon) then
            Cursor_lon := Position.lon_it.First;
            Cursor_lat := Position.lat_it.Next (Cursor_lat);
            if not P_lat.Has_Element (Cursor_lat) then
               Cursor_lat := Position.lat_it.First;
               Cursor_t := Position.t_it.Next (Cursor_t);
            end if;
         end if;

         return Position;
      end Next;

      function Image (Elm : asn1SccLocation_Fix_Packet) return String is
      begin
         return "{"
                & "t " & Time_UNIX_Pkg.Image (Elm.t)
                & ", "
                & "lat " & Latitude_WGS84_Pkg.Image (Elm.lat)
                & ", "
                & "lon " & Longitude_WGS84_Pkg.Image (Elm.lon)
                & "}";
      end Image;
   end Location_Fix_Packet_Pkg;
   package body Deployment_Digital_Pkg is
      function Image (Elm : asn1SccDeployment_Digital) return String is (Elm'Img);
   end Deployment_Digital_Pkg;
   package body System_Mode_Pkg is
      function Image (Elm : asn1SccSystem_Mode) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix
   end System_Mode_Pkg;
   package body Subsystem_Address_Pkg is
      function Image (Elm : asn1SccSubsystem_Address) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix
   end Subsystem_Address_Pkg;
   package body Mode_Change_Packet_Pkg is

      procedure Initialize (Container : in out ASN1_Container) is
      begin
         Container.target_addr_it := P_target_addr.Iterator (Container.target_addr_val.Iterate);
         Container.target_mode_it := P_target_mode.Iterator (Container.target_mode_val.Iterate);
         Container.ttl_ms_it := P_ttl_ms.Iterator (Container.ttl_ms_val.Iterate);
      end Initialize;

      function Has_Element (Position : Cursor) return Boolean is
         (P_target_addr.Has_Element
            (Position.target_addr_it.Get_Cursor));

      function Iterate (Container : ASN1_Container) return Iterator'Class is
      begin
         return I : Iterator do
            I.Position := Container'Unrestricted_Access;
         end return;
      end Iterate;

      function First (Item : Iterator) return Cursor is
         unused_Cursor_target_addr : P_target_addr.Cursor := Item.Position.target_addr_it.First;
         unused_Cursor_target_mode : P_target_mode.Cursor := Item.Position.target_mode_it.First;
         unused_Cursor_ttl_ms : P_ttl_ms.Cursor := Item.Position.ttl_ms_it.First;
      begin
         return Item.Position;
      end First;

      function Next (Item     : Iterator;
                     Position : Cursor) return Cursor is
         pragma Unreferenced (Item);
         Cursor_target_addr : P_target_addr.Cursor := Position.target_addr_it.Get_Cursor;
         Cursor_target_mode : P_target_mode.Cursor := Position.target_mode_it.Get_Cursor;
         Cursor_ttl_ms : P_ttl_ms.Cursor := Position.ttl_ms_it.Get_Cursor;
      begin
         --  Iterate on the last field then on the previous ones
         Cursor_ttl_ms := Position.ttl_ms_it.Next (Cursor_ttl_ms);
         if not P_ttl_ms.Has_Element (Cursor_ttl_ms) then
            Cursor_ttl_ms := Position.ttl_ms_it.First;
            Cursor_target_mode := Position.target_mode_it.Next (Cursor_target_mode);
            if not P_target_mode.Has_Element (Cursor_target_mode) then
               Cursor_target_mode := Position.target_mode_it.First;
               Cursor_target_addr := Position.target_addr_it.Next (Cursor_target_addr);
            end if;
         end if;

         return Position;
      end Next;

      function Image (Elm : asn1SccMode_Change_Packet) return String is
      begin
         return "{"
                & "target_addr " & Subsystem_Address_Pkg.Image (Elm.target_addr)
                & ", "
                & "target_mode " & System_Mode_Pkg.Image (Elm.target_mode)
                & ", "
                & "ttl_ms " & Mode_Change_Packet_ttl_ms_Pkg.Image (Elm.ttl_ms)
                & "}";
      end Image;
   end Mode_Change_Packet_Pkg;
   package body T_Boolean_Pkg is
      function Image (Elm : asn1SccT_Boolean) return String is (Elm'Img);
   end T_Boolean_Pkg;
   package body T_Null_Record_Pkg is
      procedure Initialize (Container : in out ASN1_Container) is
      begin
         Container.Single_Value := True;
      end Initialize;

      function Next  (Item     : Iterator;
                      Position : Cursor) return Cursor is
      begin
         Position.Single_Value := False;
         return Position;
      end Next;

      function Iterate (Container : ASN1_Container) return Iterator'Class is
      begin
         return I : Iterator do
            I.Position := Container'Unrestricted_Access;
         end return;
      end Iterate;
   end T_Null_Record_Pkg;
   package body PID_Pkg is
      function Image (Elm : asn1SccPID) return String is
         (Delete (To_Lower (Elm'Img), From => 1, Through => 7));  -- remove "asn1scc" prefix
   end PID_Pkg;
   package body Gui_send_tm_aoi_lfp_Pkg is

      procedure Initialize (Container : in out ASN1_Container) is
      begin
         Container.t_it := P_t.Iterator (Container.t_val.Iterate);
         Container.lat_it := P_lat.Iterator (Container.lat_val.Iterate);
         Container.lon_it := P_lon.Iterator (Container.lon_val.Iterate);
      end Initialize;

      function Has_Element (Position : Cursor) return Boolean is
         (P_t.Has_Element
            (Position.t_it.Get_Cursor));

      function Iterate (Container : ASN1_Container) return Iterator'Class is
      begin
         return I : Iterator do
            I.Position := Container'Unrestricted_Access;
         end return;
      end Iterate;

      function First (Item : Iterator) return Cursor is
         unused_Cursor_t : P_t.Cursor := Item.Position.t_it.First;
         unused_Cursor_lat : P_lat.Cursor := Item.Position.lat_it.First;
         unused_Cursor_lon : P_lon.Cursor := Item.Position.lon_it.First;
      begin
         return Item.Position;
      end First;

      function Next (Item     : Iterator;
                     Position : Cursor) return Cursor is
         pragma Unreferenced (Item);
         Cursor_t : P_t.Cursor := Position.t_it.Get_Cursor;
         Cursor_lat : P_lat.Cursor := Position.lat_it.Get_Cursor;
         Cursor_lon : P_lon.Cursor := Position.lon_it.Get_Cursor;
      begin
         --  Iterate on the last field then on the previous ones
         Cursor_lon := Position.lon_it.Next (Cursor_lon);
         if not P_lon.Has_Element (Cursor_lon) then
            Cursor_lon := Position.lon_it.First;
            Cursor_lat := Position.lat_it.Next (Cursor_lat);
            if not P_lat.Has_Element (Cursor_lat) then
               Cursor_lat := Position.lat_it.First;
               Cursor_t := Position.t_it.Next (Cursor_t);
            end if;
         end if;

         return Position;
      end Next;

      function Image (Elm : asn1SccGui_send_tm_aoi_lfp) return String is
      begin
         return "{"
                & "t " & Time_UNIX_Pkg.Image (Elm.t)
                & ", "
                & "lat " & Latitude_WGS84_Pkg.Image (Elm.lat)
                & ", "
                & "lon " & Longitude_WGS84_Pkg.Image (Elm.lon)
                & "}";
      end Image;
   end Gui_send_tm_aoi_lfp_Pkg;
   package body Gui_send_tm_mcp_mcp_Pkg is

      procedure Initialize (Container : in out ASN1_Container) is
      begin
         Container.target_addr_it := P_target_addr.Iterator (Container.target_addr_val.Iterate);
         Container.target_mode_it := P_target_mode.Iterator (Container.target_mode_val.Iterate);
         Container.ttl_ms_it := P_ttl_ms.Iterator (Container.ttl_ms_val.Iterate);
      end Initialize;

      function Has_Element (Position : Cursor) return Boolean is
         (P_target_addr.Has_Element
            (Position.target_addr_it.Get_Cursor));

      function Iterate (Container : ASN1_Container) return Iterator'Class is
      begin
         return I : Iterator do
            I.Position := Container'Unrestricted_Access;
         end return;
      end Iterate;

      function First (Item : Iterator) return Cursor is
         unused_Cursor_target_addr : P_target_addr.Cursor := Item.Position.target_addr_it.First;
         unused_Cursor_target_mode : P_target_mode.Cursor := Item.Position.target_mode_it.First;
         unused_Cursor_ttl_ms : P_ttl_ms.Cursor := Item.Position.ttl_ms_it.First;
      begin
         return Item.Position;
      end First;

      function Next (Item     : Iterator;
                     Position : Cursor) return Cursor is
         pragma Unreferenced (Item);
         Cursor_target_addr : P_target_addr.Cursor := Position.target_addr_it.Get_Cursor;
         Cursor_target_mode : P_target_mode.Cursor := Position.target_mode_it.Get_Cursor;
         Cursor_ttl_ms : P_ttl_ms.Cursor := Position.ttl_ms_it.Get_Cursor;
      begin
         --  Iterate on the last field then on the previous ones
         Cursor_ttl_ms := Position.ttl_ms_it.Next (Cursor_ttl_ms);
         if not P_ttl_ms.Has_Element (Cursor_ttl_ms) then
            Cursor_ttl_ms := Position.ttl_ms_it.First;
            Cursor_target_mode := Position.target_mode_it.Next (Cursor_target_mode);
            if not P_target_mode.Has_Element (Cursor_target_mode) then
               Cursor_target_mode := Position.target_mode_it.First;
               Cursor_target_addr := Position.target_addr_it.Next (Cursor_target_addr);
            end if;
         end if;

         return Position;
      end Next;

      function Image (Elm : asn1SccGui_send_tm_mcp_mcp) return String is
      begin
         return "{"
                & "target_addr " & Subsystem_Address_Pkg.Image (Elm.target_addr)
                & ", "
                & "target_mode " & System_Mode_Pkg.Image (Elm.target_mode)
                & ", "
                & "ttl_ms " & Mode_Change_Packet_ttl_ms_Pkg.Image (Elm.ttl_ms)
                & "}";
      end Image;
   end Gui_send_tm_mcp_mcp_Pkg;

end ASN1_Ada_Iterators.Iterators;
