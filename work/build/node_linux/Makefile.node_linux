#  node_linux x86_linux  PLATFORM_NATIVE ocarina_processors_x86::x86.linux

MIN_GCC_VERSION="10"
GCC_VERSION:="` gcc -dumpversion -r | grep -oP "[0-9]+" | head -1 `"
GCC_STACKANALYSIS_FLAGS=-fstack-usage
IS_GCC_ABOVE_MIN_VERSION:=$(shell expr "$(GCC_VERSION)" ">=" "$(MIN_GCC_VERSION)")
ifeq "$(IS_GCC_ABOVE_MIN_VERSION)" "1"
    GCC_STACKANALYSIS_FLAGS+=-fcallgraph-info=su,da
endif

all:	debug

simulate:
	# Configure gprbuild to use GCC toolchain even if LLVM is installed
	gprconfig --batch --config=Ada,,default,,GNAT --config=C,,default,,GCC --config=C++,,default,,G++ || :

debug:
	# Configure gprbuild to use GCC toolchain even if LLVM is installed
	gprconfig --batch --config=Ada,,default,,GNAT --config=C,,default,,GCC --config=C++,,default,,G++ || :
	# In debug mode, add -v to gprbuild command for verbose output
	gprbuild -v -p -P demo.gpr -XCFG="Debug" -XSTACK_ANALYSIS_FLAGS="${GCC_STACKANALYSIS_FLAGS}" -cargs:C -DSTATIC=""

release:
	# Configure gprbuild to use GCC toolchain even if LLVM is installed
	gprconfig --batch --config=Ada,,default,,GNAT --config=C,,default,,GCC --config=C++,,default,,G++ || :
	gprbuild -p -P demo.gpr -XCFG="Release" -XSTACK_ANALYSIS_FLAGS="${GCC_STACKANALYSIS_FLAGS}" -cargs:C -DSTATIC=""



clean:
	rm -rf demo_obj

