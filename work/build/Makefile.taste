TOOL_INST       := $(shell taste-config --prefix)

all: node_linux_x86_linux
	# Check stack usage for all tasks of all nodes
	python3 ./checkAllStacks.py

# Generate a dynamic library excluding the runtime for each node
simu: node_linux_simu


run:	run_demo_partition


ocarina:  # call Ocarina for POHI targets
	ocarina -x main.aadl

DriversConfig/drivers_config.h:  # Not a distributed system => nothing to do

check_targets:  # check that runtime of every node is installed
	check_deployment_target_cli.py x86_linux


# Build of node node_linux for PLATFORM_NATIVE
# (rule generated by templates/concurrency_view/aadl_4_makefile/node.tmplt)

node_linux_x86_linux: demo_glue DriversConfig/drivers_config.h
	$(MAKE) -j -C node_linux -f Makefile.node_linux



#  Build of partition demo (common to all targets)
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)

DEMO_USER_CFLAGS += -no-pie
export DEMO_USER_CFLAGS
DEMO_USER_LDFLAGS += -no-pie
export DEMO_USER_LDFLAGS

# CPU PLATFORM: PLATFORM_NATIVE
demo_glue:	gui  loc_provider  state_handler_entrypoint  tc_provider  tc_validation  tm_collection  tm_provider
	args=$$(python3 -c "import os, sys; print(' '.join({os.path.basename(f):f for f in sys.argv[1:]}.values()))" ${wildcard ../state_handler_entrypoint/SDL/code/state_handler_entrypoint_datamodel.asn} ${wildcard ../state_handler_entrypoint/SDL/Context-state-handler-entrypoint.asn} ../dataview/dataview-uniq.asn); \
	mkdir -p ../dataview/Ada; asn1scc -Ada -equal --target allboards -typePrefix asn1Scc -o ../dataview/Ada $$args 
	touch $@



# Rule to execute the generated binary for this partition (used by space creator Run button)
run_demo_partition: run_gui_gui run_demo_binary


run_demo_binary:
	# make sure the generated artefacts appear in space creator
	touch ../../*.pro
	cd ../binaries && taste-run-and-trace ./demo || :

run_gui_gui:
	uname -a | grep WSL && sudo sysctl fs.mqueue.msg_max=100 || :
	cd ../binaries && ./gui
	# When GUI exits, kill the binary (-INT to allow coverage collection)
	pkill -INT demo


# Provide scripts to run the gui and its partition automatically
gui: ../binaries/gui
	touch $@

../binaries/gui:
	# Generate the script containing a copy of GUI/src (UserWidgets.py + other files)
	echo "cd gui_GUI && cp -fu ../../gui/GUI/src/* . && taste-gui" > $@
	chmod +x $@
	echo "./demo & sleep 1 ; ./gui ; pkill -INT demo" > ../binaries/run_demo_partition
	chmod +x ../binaries/run_demo_partition

loc_provider:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C


state_handler_entrypoint:	../state_handler_entrypoint/SDL/code/state_handler_entrypoint.adb
	touch $@

../state_handler_entrypoint/SDL/code/state_handler_entrypoint.adb:	../state_handler_entrypoint/SDL/src/state_handler_entrypoint.pr ../state_handler_entrypoint/SDL/src/system_structure.pr ../state_handler_entrypoint/SDL/src/dataview-uniq.asn
	# Call opengeode to generate the functional code
	$(MAKE) -j -C ../state_handler_entrypoint/SDL generate-code

tc_provider:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C


tc_validation:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in CPP, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in CPP


tm_collection:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C


tm_provider:
	touch $@
	@# If you need to add a call to a code generator, or anything else
	@# related to functions in C, edit the following template:
	@# $(KAZOO_SRC)/templates/concurrency_view/aadl_4_makefile/block.tmplt
	@# Placeholder if anything has to be done for this function coded in C



clean:
	$(MAKE) -C node_linux -f Makefile.node_linux clean
	rm -rf *_adainit deploymentview_final

.PHONY:	clean simu run $(IF_PROPERTIES)

